{"ast":null,"code":"import _toConsumableArray from \"/Users/condit/projects/portal-pa/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/condit/projects/portal-pa/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/condit/projects/portal-pa/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { coerceBooleanProperty, coerceElement, coerceArray } from '@angular/cdk/coercion';\nimport { Subscription, Subject, Observable, merge } from 'rxjs';\nimport { ElementRef, Injectable, NgZone, Inject, InjectionToken, NgModule, ContentChildren, EventEmitter, forwardRef, Input, Output, Optional, Directive, ChangeDetectorRef, SkipSelf, ContentChild, ViewContainerRef, TemplateRef, defineInjectable, inject } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { startWith, take, map, takeUntil, switchMap, tap } from 'rxjs/operators';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * \\@docs-private\n * @param {?} dest\n * @param {?} source\n * @return {?}\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\n\nfunction extendStyles(dest, source) {\n  for (var key in source) {\n    if (source.hasOwnProperty(key)) {\n      dest[\n      /** @type {?} */\n      key] = source[\n      /** @type {?} */\n      key];\n    }\n  }\n\n  return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * \\@docs-private\n * @param {?} element Element on which to toggle the drag interactions.\n * @param {?} enable Whether the drag interactions should be enabled.\n * @return {?}\n */\n\n\nfunction toggleNativeDragInteractions(element, enable) {\n  /** @type {?} */\n  var userSelect = enable ? '' : 'none';\n  extendStyles(element.style, {\n    touchAction: enable ? '' : 'none',\n    webkitUserDrag: enable ? '' : 'none',\n    webkitTapHighlightColor: enable ? '' : 'transparent',\n    userSelect: userSelect,\n    msUserSelect: userSelect,\n    webkitUserSelect: userSelect,\n    MozUserSelect: userSelect\n  });\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Parses a CSS time value to milliseconds.\n * @param {?} value\n * @return {?}\n */\n\n\nfunction parseCssTimeUnitsToMs(value) {\n  // Some browsers will return it in seconds, whereas others will return milliseconds.\n\n  /** @type {?} */\n  var multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n  return parseFloat(value) * multiplier;\n}\n/**\n * Gets the transform transition duration, including the delay, of an element in milliseconds.\n * @param {?} element\n * @return {?}\n */\n\n\nfunction getTransformTransitionDurationInMs(element) {\n  /** @type {?} */\n  var computedStyle = getComputedStyle(element);\n  /** @type {?} */\n\n  var transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n  /** @type {?} */\n\n  var property = transitionedProperties.find(function (prop) {\n    return prop === 'transform' || prop === 'all';\n  }); // If there's no transition for `all` or `transform`, we shouldn't do anything.\n\n  if (!property) {\n    return 0;\n  } // Get the index of the property that we're interested in and match\n  // it up to the same index in `transition-delay` and `transition-duration`.\n\n  /** @type {?} */\n\n\n  var propertyIndex = transitionedProperties.indexOf(property);\n  /** @type {?} */\n\n  var rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n  /** @type {?} */\n\n  var rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n  return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) + parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\n}\n/**\n * Parses out multiple values from a computed style into an array.\n * @param {?} computedStyle\n * @param {?} name\n * @return {?}\n */\n\n\nfunction parseCssPropertyValue(computedStyle, name) {\n  /** @type {?} */\n  var value = computedStyle.getPropertyValue(name);\n  return value.split(',').map(function (part) {\n    return part.trim();\n  });\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Options that can be used to bind a passive event listener.\n * @type {?}\n */\n\n\nvar passiveEventListenerOptions = normalizePassiveListenerOptions({\n  passive: true\n});\n/**\n * Options that can be used to bind an active event listener.\n * @type {?}\n */\n\nvar activeEventListenerOptions = normalizePassiveListenerOptions({\n  passive: false\n});\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n * @type {?}\n */\n\nvar MOUSE_EVENT_IGNORE_TIME = 800;\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n * \\@docs-private\n * @template T\n */\n\nvar DragRef = /*#__PURE__*/function () {\n  /**\n   * @param {?} element\n   * @param {?} _config\n   * @param {?} _document\n   * @param {?} _ngZone\n   * @param {?} _viewportRuler\n   * @param {?} _dragDropRegistry\n   */\n  function DragRef(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n    var _this = this;\n\n    _classCallCheck(this, DragRef);\n\n    this._config = _config;\n    this._document = _document;\n    this._ngZone = _ngZone;\n    this._viewportRuler = _viewportRuler;\n    this._dragDropRegistry = _dragDropRegistry;\n    /**\n     * CSS `transform` applied to the element when it isn't being dragged. We need a\n     * passive transform in order for the dragged element to retain its new position\n     * after the user has stopped dragging and because we need to know the relative\n     * position in case they start dragging again. This corresponds to `element.style.transform`.\n     */\n\n    this._passiveTransform = {\n      x: 0,\n      y: 0\n    };\n    /**\n     * CSS `transform` that is applied to the element while it's being dragged.\n     */\n\n    this._activeTransform = {\n      x: 0,\n      y: 0\n    };\n    /**\n     * Emits when the item is being moved.\n     */\n\n    this._moveEvents = new Subject();\n    /**\n     * Amount of subscriptions to the move event. Used to avoid\n     * hitting the zone if the consumer didn't subscribe to it.\n     */\n\n    this._moveEventSubscriptions = 0;\n    /**\n     * Subscription to pointer movement events.\n     */\n\n    this._pointerMoveSubscription = Subscription.EMPTY;\n    /**\n     * Subscription to the event that is dispatched when the user lifts their pointer.\n     */\n\n    this._pointerUpSubscription = Subscription.EMPTY;\n    /**\n     * Cached reference to the boundary element.\n     */\n\n    this._boundaryElement = null;\n    /**\n     * Whether the native dragging interactions have been enabled on the root element.\n     */\n\n    this._nativeInteractionsEnabled = true;\n    /**\n     * Elements that can be used to drag the draggable item.\n     */\n\n    this._handles = [];\n    /**\n     * Registered handles that are currently disabled.\n     */\n\n    this._disabledHandles = new Set();\n    /**\n     * Layout direction of the item.\n     */\n\n    this._direction = 'ltr';\n    this._disabled = false;\n    /**\n     * Emits as the drag sequence is being prepared.\n     */\n\n    this.beforeStarted = new Subject();\n    /**\n     * Emits when the user starts dragging the item.\n     */\n\n    this.started = new Subject();\n    /**\n     * Emits when the user has released a drag item, before any animations have started.\n     */\n\n    this.released = new Subject();\n    /**\n     * Emits when the user stops dragging an item in the container.\n     */\n\n    this.ended = new Subject();\n    /**\n     * Emits when the user has moved the item into a new container.\n     */\n\n    this.entered = new Subject();\n    /**\n     * Emits when the user removes the item its container by dragging it into another container.\n     */\n\n    this.exited = new Subject();\n    /**\n     * Emits when the user drops the item inside a container.\n     */\n\n    this.dropped = new Subject();\n    /**\n     * Emits as the user is dragging the item. Use with caution,\n     * because this event will fire for every pixel that the user has dragged.\n     */\n\n    this.moved = new Observable(function (observer) {\n      /** @type {?} */\n      var subscription = _this._moveEvents.subscribe(observer);\n\n      _this._moveEventSubscriptions++;\n      return function () {\n        subscription.unsubscribe();\n        _this._moveEventSubscriptions--;\n      };\n    });\n    /**\n     * Handler for the `mousedown`/`touchstart` events.\n     */\n\n    this._pointerDown = function (event) {\n      _this.beforeStarted.next(); // Delegate the event based on whether it started from a handle or the element itself.\n\n\n      if (_this._handles.length) {\n        /** @type {?} */\n        var targetHandle = _this._handles.find(function (handle) {\n          /** @type {?} */\n          var target = event.target;\n          return !!target && (target === handle || handle.contains(\n          /** @type {?} */\n          target));\n        });\n\n        if (targetHandle && !_this._disabledHandles.has(targetHandle) && !_this.disabled) {\n          _this._initializeDragSequence(targetHandle, event);\n        }\n      } else if (!_this.disabled) {\n        _this._initializeDragSequence(_this._rootElement, event);\n      }\n    };\n    /**\n     * Handler that is invoked when the user moves their pointer after they've initiated a drag.\n     */\n\n\n    this._pointerMove = function (event) {\n      if (!_this._hasStartedDragging) {\n        /** @type {?} */\n        var pointerPosition = _this._getPointerPositionOnPage(event);\n        /** @type {?} */\n\n\n        var distanceX = Math.abs(pointerPosition.x - _this._pickupPositionOnPage.x);\n        /** @type {?} */\n\n        var distanceY = Math.abs(pointerPosition.y - _this._pickupPositionOnPage.y); // Only start dragging after the user has moved more than the minimum distance in either\n        // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\n        // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n        // per pixel of movement (e.g. if the user moves their pointer quickly).\n\n        if (distanceX + distanceY >= _this._config.dragStartThreshold) {\n          _this._hasStartedDragging = true;\n\n          _this._ngZone.run(function () {\n            return _this._startDragSequence(event);\n          });\n        }\n\n        return;\n      } // We only need the preview dimensions if we have a boundary element.\n\n\n      if (_this._boundaryElement) {\n        // Cache the preview element rect if we haven't cached it already or if\n        // we cached it too early before the element dimensions were computed.\n        if (!_this._previewRect || !_this._previewRect.width && !_this._previewRect.height) {\n          _this._previewRect = (_this._preview || _this._rootElement).getBoundingClientRect();\n        }\n      }\n      /** @type {?} */\n\n\n      var constrainedPointerPosition = _this._getConstrainedPointerPosition(event);\n\n      _this._hasMoved = true;\n      event.preventDefault();\n\n      _this._updatePointerDirectionDelta(constrainedPointerPosition);\n\n      if (_this._dropContainer) {\n        _this._updateActiveDropContainer(constrainedPointerPosition);\n      } else {\n        /** @type {?} */\n        var activeTransform = _this._activeTransform;\n        activeTransform.x = constrainedPointerPosition.x - _this._pickupPositionOnPage.x + _this._passiveTransform.x;\n        activeTransform.y = constrainedPointerPosition.y - _this._pickupPositionOnPage.y + _this._passiveTransform.y;\n        /** @type {?} */\n\n        var transform = getTransform(activeTransform.x, activeTransform.y); // Preserve the previous `transform` value, if there was one. Note that we apply our own\n        // transform before the user's, because things like rotation can affect which direction\n        // the element will be translated towards.\n\n        _this._rootElement.style.transform = _this._initialTransform ? transform + ' ' + _this._initialTransform : transform; // Apply transform as attribute if dragging and svg element to work for IE\n\n        if (typeof SVGElement !== 'undefined' && _this._rootElement instanceof SVGElement) {\n          /** @type {?} */\n          var appliedTransform = \"translate(\".concat(activeTransform.x, \" \").concat(activeTransform.y, \")\");\n\n          _this._rootElement.setAttribute('transform', appliedTransform);\n        }\n      } // Since this event gets fired for every pixel while dragging, we only\n      // want to fire it if the consumer opted into it. Also we have to\n      // re-enter the zone because we run all of the events on the outside.\n\n\n      if (_this._moveEventSubscriptions > 0) {\n        _this._ngZone.run(function () {\n          _this._moveEvents.next({\n            source: _this,\n            pointerPosition: constrainedPointerPosition,\n            event: event,\n            delta: _this._pointerDirectionDelta\n          });\n        });\n      }\n    };\n    /**\n     * Handler that is invoked when the user lifts their pointer up, after initiating a drag.\n     */\n\n\n    this._pointerUp = function (event) {\n      // Note that here we use `isDragging` from the service, rather than from `this`.\n      // The difference is that the one from the service reflects whether a dragging sequence\n      // has been initiated, whereas the one on `this` includes whether the user has passed\n      // the minimum dragging threshold.\n      if (!_this._dragDropRegistry.isDragging(_this)) {\n        return;\n      }\n\n      _this._removeSubscriptions();\n\n      _this._dragDropRegistry.stopDragging(_this);\n\n      if (_this._handles) {\n        _this._rootElement.style.webkitTapHighlightColor = _this._rootElementTapHighlight;\n      }\n\n      if (!_this._hasStartedDragging) {\n        return;\n      }\n\n      _this.released.next({\n        source: _this\n      });\n\n      if (!_this._dropContainer) {\n        // Convert the active transform into a passive one. This means that next time\n        // the user starts dragging the item, its position will be calculated relatively\n        // to the new passive transform.\n        _this._passiveTransform.x = _this._activeTransform.x;\n        _this._passiveTransform.y = _this._activeTransform.y;\n\n        _this._ngZone.run(function () {\n          return _this.ended.next({\n            source: _this\n          });\n        });\n\n        _this._dragDropRegistry.stopDragging(_this);\n\n        return;\n      }\n\n      _this._animatePreviewToPlaceholder().then(function () {\n        _this._cleanupDragArtifacts(event);\n\n        _this._dragDropRegistry.stopDragging(_this);\n      });\n    };\n\n    this.withRootElement(element);\n\n    _dragDropRegistry.registerDragItem(this);\n  }\n  /**\n   * Whether starting to drag this element is disabled.\n   * @return {?}\n   */\n\n\n  _createClass(DragRef, [{\n    key: \"getPlaceholderElement\",\n\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     * @return {?}\n     */\n    value: function getPlaceholderElement() {\n      return this._placeholder;\n    }\n    /**\n     * Returns the root draggable element.\n     * @return {?}\n     */\n\n  }, {\n    key: \"getRootElement\",\n    value: function getRootElement() {\n      return this._rootElement;\n    }\n    /**\n     * Registers the handles that can be used to drag the element.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} handles\n     * @return {THIS}\n     */\n\n  }, {\n    key: \"withHandles\",\n    value: function withHandles(handles) {\n      /** @type {?} */\n      this._handles = handles.map(function (handle) {\n        return coerceElement(handle);\n      });\n\n      /** @type {?} */\n      this._handles.forEach(function (handle) {\n        return toggleNativeDragInteractions(handle, false);\n      });\n\n      /** @type {?} */\n      this._toggleNativeDragInteractions();\n\n      return (\n        /** @type {?} */\n        this\n      );\n    }\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} template Template that from which to stamp out the preview.\n     * @return {THIS}\n     */\n\n  }, {\n    key: \"withPreviewTemplate\",\n    value: function withPreviewTemplate(template) {\n      /** @type {?} */\n      this._previewTemplate = template;\n      return (\n        /** @type {?} */\n        this\n      );\n    }\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} template Template that from which to stamp out the placeholder.\n     * @return {THIS}\n     */\n\n  }, {\n    key: \"withPlaceholderTemplate\",\n    value: function withPlaceholderTemplate(template) {\n      /** @type {?} */\n      this._placeholderTemplate = template;\n      return (\n        /** @type {?} */\n        this\n      );\n    }\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} rootElement\n     * @return {THIS}\n     */\n\n  }, {\n    key: \"withRootElement\",\n    value: function withRootElement(rootElement) {\n      /** @type {?} */\n      var element = coerceElement(rootElement);\n\n      if (element !==\n      /** @type {?} */\n      this._rootElement) {\n        if (\n        /** @type {?} */\n        this._rootElement) {\n          /** @type {?} */\n          this._removeRootElementListeners(\n          /** @type {?} */\n          this._rootElement);\n        }\n\n        element.addEventListener('mousedown',\n        /** @type {?} */\n        this._pointerDown, activeEventListenerOptions);\n        element.addEventListener('touchstart',\n        /** @type {?} */\n        this._pointerDown, passiveEventListenerOptions);\n\n        /** @type {?} */\n        this._initialTransform = undefined;\n\n        /** @type {?} */\n        this._rootElement = element;\n      }\n\n      return (\n        /** @type {?} */\n        this\n      );\n    }\n    /**\n     * Element to which the draggable's position will be constrained.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} boundaryElement\n     * @return {THIS}\n     */\n\n  }, {\n    key: \"withBoundaryElement\",\n    value: function withBoundaryElement(boundaryElement) {\n      /** @type {?} */\n      this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n      return (\n        /** @type {?} */\n        this\n      );\n    }\n    /**\n     * Removes the dragging functionality from the DOM element.\n     * @return {?}\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this._removeRootElementListeners(this._rootElement); // Do this check before removing from the registry since it'll\n      // stop being considered as dragged once it is removed.\n\n\n      if (this.isDragging()) {\n        // Since we move out the element to the end of the body while it's being\n        // dragged, we have to make sure that it's removed if it gets destroyed.\n        removeElement(this._rootElement);\n      }\n\n      this._destroyPreview();\n\n      this._destroyPlaceholder();\n\n      this._dragDropRegistry.removeDragItem(this);\n\n      this._removeSubscriptions();\n\n      this.beforeStarted.complete();\n      this.started.complete();\n      this.released.complete();\n      this.ended.complete();\n      this.entered.complete();\n      this.exited.complete();\n      this.dropped.complete();\n\n      this._moveEvents.complete();\n\n      this._handles = [];\n\n      this._disabledHandles.clear();\n\n      this._dropContainer = undefined;\n      this._boundaryElement = this._rootElement = this._placeholderTemplate = this._previewTemplate = this._nextSibling =\n      /** @type {?} */\n      null;\n    }\n    /**\n     * Checks whether the element is currently being dragged.\n     * @return {?}\n     */\n\n  }, {\n    key: \"isDragging\",\n    value: function isDragging() {\n      return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n    }\n    /**\n     * Resets a standalone drag item to its initial position.\n     * @return {?}\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this._rootElement.style.transform = this._initialTransform || '';\n      this._activeTransform = {\n        x: 0,\n        y: 0\n      };\n      this._passiveTransform = {\n        x: 0,\n        y: 0\n      };\n    }\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param {?} handle Handle element that should be disabled.\n     * @return {?}\n     */\n\n  }, {\n    key: \"disableHandle\",\n    value: function disableHandle(handle) {\n      if (this._handles.indexOf(handle) > -1) {\n        this._disabledHandles.add(handle);\n      }\n    }\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param {?} handle Handle element to be enabled.\n     * @return {?}\n     */\n\n  }, {\n    key: \"enableHandle\",\n    value: function enableHandle(handle) {\n      this._disabledHandles.delete(handle);\n    }\n    /**\n     * Sets the layout direction of the draggable item.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} direction\n     * @return {THIS}\n     */\n\n  }, {\n    key: \"withDirection\",\n    value: function withDirection(direction) {\n      /** @type {?} */\n      this._direction = direction;\n      return (\n        /** @type {?} */\n        this\n      );\n    }\n    /**\n     * Sets the container that the item is part of.\n     * @param {?} container\n     * @return {?}\n     */\n\n  }, {\n    key: \"_withDropContainer\",\n    value: function _withDropContainer(container) {\n      this._dropContainer = container;\n    }\n    /**\n     * Unsubscribes from the global subscriptions.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_removeSubscriptions\",\n    value: function _removeSubscriptions() {\n      this._pointerMoveSubscription.unsubscribe();\n\n      this._pointerUpSubscription.unsubscribe();\n    }\n    /**\n     * Destroys the preview element and its ViewRef.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_destroyPreview\",\n    value: function _destroyPreview() {\n      if (this._preview) {\n        removeElement(this._preview);\n      }\n\n      if (this._previewRef) {\n        this._previewRef.destroy();\n      }\n\n      this._preview = this._previewRef =\n      /** @type {?} */\n      null;\n    }\n    /**\n     * Destroys the placeholder element and its ViewRef.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_destroyPlaceholder\",\n    value: function _destroyPlaceholder() {\n      if (this._placeholder) {\n        removeElement(this._placeholder);\n      }\n\n      if (this._placeholderRef) {\n        this._placeholderRef.destroy();\n      }\n\n      this._placeholder = this._placeholderRef =\n      /** @type {?} */\n      null;\n    }\n    /**\n     * Starts the dragging sequence.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_startDragSequence\",\n    value: function _startDragSequence(event) {\n      // Emit the event on the item before the one on the container.\n      this.started.next({\n        source: this\n      });\n\n      if (isTouchEvent(event)) {\n        this._lastTouchEventTime = Date.now();\n      }\n\n      if (this._dropContainer) {\n        /** @type {?} */\n        var element = this._rootElement; // Grab the `nextSibling` before the preview and placeholder\n        // have been created so we don't get the preview by accident.\n\n        this._nextSibling = element.nextSibling;\n        /** @type {?} */\n\n        var preview = this._preview = this._createPreviewElement();\n        /** @type {?} */\n\n\n        var placeholder = this._placeholder = this._createPlaceholderElement(); // We move the element out at the end of the body and we make it hidden, because keeping it in\n        // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n        // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n\n\n        element.style.display = 'none';\n\n        this._document.body.appendChild(\n        /** @type {?} */\n        element.parentNode.replaceChild(placeholder, element));\n\n        this._document.body.appendChild(preview);\n\n        this._dropContainer.start();\n      }\n    }\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @private\n     * @param {?} referenceElement Element that started the drag sequence.\n     * @param {?} event Browser event object that started the sequence.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_initializeDragSequence\",\n    value: function _initializeDragSequence(referenceElement, event) {\n      // Always stop propagation for the event that initializes\n      // the dragging sequence, in order to prevent it from potentially\n      // starting another sequence for a draggable parent somewhere up the DOM tree.\n      event.stopPropagation();\n      /** @type {?} */\n\n      var isDragging = this.isDragging();\n      /** @type {?} */\n\n      var isTouchSequence = isTouchEvent(event);\n      /** @type {?} */\n\n      var isAuxiliaryMouseButton = !isTouchSequence &&\n      /** @type {?} */\n      event.button !== 0;\n      /** @type {?} */\n\n      var rootElement = this._rootElement;\n      /** @type {?} */\n\n      var isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime && this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now(); // If the event started from an element with the native HTML drag&drop, it'll interfere\n      // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n      // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n      // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n      // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n      // events from firing on touch devices.\n\n      if (event.target &&\n      /** @type {?} */\n      event.target.draggable && event.type === 'mousedown') {\n        event.preventDefault();\n      } // Abort if the user is already dragging or is using a mouse button other than the primary one.\n\n\n      if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent) {\n        return;\n      } // Cache the previous transform amount only after the first drag sequence, because\n      // we don't want our own transforms to stack on top of each other.\n\n\n      if (this._initialTransform == null) {\n        this._initialTransform = this._rootElement.style.transform || '';\n      } // If we've got handles, we need to disable the tap highlight on the entire root element,\n      // otherwise iOS will still add it, even though all the drag interactions on the handle\n      // are disabled.\n\n\n      if (this._handles.length) {\n        this._rootElementTapHighlight = rootElement.style.webkitTapHighlightColor;\n        rootElement.style.webkitTapHighlightColor = 'transparent';\n      }\n\n      this._toggleNativeDragInteractions();\n\n      this._hasStartedDragging = this._hasMoved = false;\n      this._initialContainer =\n      /** @type {?} */\n      this._dropContainer;\n      this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n      this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n      this._scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n      if (this._boundaryElement) {\n        this._boundaryRect = this._boundaryElement.getBoundingClientRect();\n      } // If we have a custom preview template, the element won't be visible anyway so we avoid the\n      // extra `getBoundingClientRect` calls and just move the preview next to the cursor.\n\n\n      this._pickupPositionInElement = this._previewTemplate && this._previewTemplate.template ? {\n        x: 0,\n        y: 0\n      } : this._getPointerPositionInElement(referenceElement, event);\n      /** @type {?} */\n\n      var pointerPosition = this._pickupPositionOnPage = this._getPointerPositionOnPage(event);\n\n      this._pointerDirectionDelta = {\n        x: 0,\n        y: 0\n      };\n      this._pointerPositionAtLastDirectionChange = {\n        x: pointerPosition.x,\n        y: pointerPosition.y\n      };\n\n      this._dragDropRegistry.startDragging(this, event);\n    }\n    /**\n     * Cleans up the DOM artifacts that were added to facilitate the element being dragged.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_cleanupDragArtifacts\",\n    value: function _cleanupDragArtifacts(event) {\n      var _this2 = this;\n\n      // Restore the element's visibility and insert it at its old position in the DOM.\n      // It's important that we maintain the position, because moving the element around in the DOM\n      // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n      // while moving the existing elements in all other cases.\n      this._rootElement.style.display = '';\n\n      if (this._nextSibling) {\n        /** @type {?} */\n        this._nextSibling.parentNode.insertBefore(this._rootElement, this._nextSibling);\n      } else {\n        this._initialContainer.element.appendChild(this._rootElement);\n      }\n\n      this._destroyPreview();\n\n      this._destroyPlaceholder();\n\n      this._boundaryRect = this._previewRect = undefined; // Re-enter the NgZone since we bound `document` events on the outside.\n\n      this._ngZone.run(function () {\n        /** @type {?} */\n        var container =\n        /** @type {?} */\n        _this2._dropContainer;\n        /** @type {?} */\n\n        var currentIndex = container.getItemIndex(_this2);\n\n        var _this2$_getPointerPos = _this2._getPointerPositionOnPage(event),\n            x = _this2$_getPointerPos.x,\n            y = _this2$_getPointerPos.y;\n        /** @type {?} */\n\n\n        var isPointerOverContainer = container._isOverContainer(x, y);\n\n        _this2.ended.next({\n          source: _this2\n        });\n\n        _this2.dropped.next({\n          item: _this2,\n          currentIndex: currentIndex,\n          previousIndex: _this2._initialContainer.getItemIndex(_this2),\n          container: container,\n          previousContainer: _this2._initialContainer,\n          isPointerOverContainer: isPointerOverContainer\n        });\n\n        container.drop(_this2, currentIndex, _this2._initialContainer, isPointerOverContainer);\n        _this2._dropContainer = _this2._initialContainer;\n      });\n    }\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     * @private\n     * @param {?} __0\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateActiveDropContainer\",\n    value: function _updateActiveDropContainer(_ref) {\n      var _this3 = this;\n\n      var x = _ref.x,\n          y = _ref.y;\n\n      // Drop container that draggable has been moved into.\n\n      /** @type {?} */\n      var newContainer =\n      /** @type {?} */\n      this._dropContainer._getSiblingContainerFromPosition(this, x, y) || this._initialContainer._getSiblingContainerFromPosition(this, x, y); // If we couldn't find a new container to move the item into, and the item has left it's\n      // initial container, check whether the it's over the initial container. This handles the\n      // case where two containers are connected one way and the user tries to undo dragging an\n      // item into a new container.\n\n\n      if (!newContainer && this._dropContainer !== this._initialContainer && this._initialContainer._isOverContainer(x, y)) {\n        newContainer = this._initialContainer;\n      }\n\n      if (newContainer && newContainer !== this._dropContainer) {\n        this._ngZone.run(function () {\n          // Notify the old container that the item has left.\n          _this3.exited.next({\n            item: _this3,\n            container:\n            /** @type {?} */\n            _this3._dropContainer\n          });\n\n          /** @type {?} */\n          _this3._dropContainer.exit(_this3); // Notify the new container that the item has entered.\n\n\n          _this3.entered.next({\n            item: _this3,\n            container:\n            /** @type {?} */\n            newContainer\n          });\n\n          _this3._dropContainer =\n          /** @type {?} */\n          newContainer;\n\n          _this3._dropContainer.enter(_this3, x, y);\n        });\n      }\n\n      /** @type {?} */\n      this._dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\n\n      this._preview.style.transform = getTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n    }\n    /**\n     * Creates the element that will be rendered next to the user's pointer\n     * and will be used as a preview of the element that is being dragged.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_createPreviewElement\",\n    value: function _createPreviewElement() {\n      /** @type {?} */\n      var previewConfig = this._previewTemplate;\n      /** @type {?} */\n\n      var previewTemplate = previewConfig ? previewConfig.template : null;\n      /** @type {?} */\n\n      var preview;\n\n      if (previewTemplate) {\n        /** @type {?} */\n        var viewRef =\n        /** @type {?} */\n        previewConfig.viewContainer.createEmbeddedView(previewTemplate,\n        /** @type {?} */\n        previewConfig.context);\n        preview = viewRef.rootNodes[0];\n        this._previewRef = viewRef;\n        preview.style.transform = getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n      } else {\n        /** @type {?} */\n        var element = this._rootElement;\n        /** @type {?} */\n\n        var elementRect = element.getBoundingClientRect();\n        preview = deepCloneNode(element);\n        preview.style.width = \"\".concat(elementRect.width, \"px\");\n        preview.style.height = \"\".concat(elementRect.height, \"px\");\n        preview.style.transform = getTransform(elementRect.left, elementRect.top);\n      }\n\n      extendStyles(preview.style, {\n        // It's important that we disable the pointer events on the preview, because\n        // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n        pointerEvents: 'none',\n        position: 'fixed',\n        top: '0',\n        left: '0',\n        zIndex: '1000'\n      });\n      toggleNativeDragInteractions(preview, false);\n      preview.classList.add('cdk-drag-preview');\n      preview.setAttribute('dir', this._direction);\n      return preview;\n    }\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @private\n     * @return {?} Promise that resolves when the animation completes.\n     */\n\n  }, {\n    key: \"_animatePreviewToPlaceholder\",\n    value: function _animatePreviewToPlaceholder() {\n      var _this4 = this;\n\n      // If the user hasn't moved yet, the transitionend event won't fire.\n      if (!this._hasMoved) {\n        return Promise.resolve();\n      }\n      /** @type {?} */\n\n\n      var placeholderRect = this._placeholder.getBoundingClientRect(); // Apply the class that adds a transition to the preview.\n\n\n      this._preview.classList.add('cdk-drag-animating'); // Move the preview to the placeholder position.\n\n\n      this._preview.style.transform = getTransform(placeholderRect.left, placeholderRect.top); // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n      // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n      // apply its style, we take advantage of the available info to figure out whether we need to\n      // bind the event in the first place.\n\n      /** @type {?} */\n\n      var duration = getTransformTransitionDurationInMs(this._preview);\n\n      if (duration === 0) {\n        return Promise.resolve();\n      }\n\n      return this._ngZone.runOutsideAngular(function () {\n        return new Promise(function (resolve) {\n          /** @type {?} */\n          var handler =\n          /** @type {?} */\n          function handler(event) {\n            if (!event || event.target === _this4._preview && event.propertyName === 'transform') {\n              _this4._preview.removeEventListener('transitionend', handler);\n\n              resolve();\n              clearTimeout(timeout);\n            }\n          }; // If a transition is short enough, the browser might not fire the `transitionend` event.\n          // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n          // fire if the transition hasn't completed when it was supposed to.\n\n          /** @type {?} */\n\n\n          var timeout = setTimeout(\n          /** @type {?} */\n          handler, duration * 1.5);\n\n          _this4._preview.addEventListener('transitionend', handler);\n        });\n      });\n    }\n    /**\n     * Creates an element that will be shown instead of the current element while dragging.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_createPlaceholderElement\",\n    value: function _createPlaceholderElement() {\n      /** @type {?} */\n      var placeholderConfig = this._placeholderTemplate;\n      /** @type {?} */\n\n      var placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n      /** @type {?} */\n\n      var placeholder;\n\n      if (placeholderTemplate) {\n        this._placeholderRef =\n        /** @type {?} */\n        placeholderConfig.viewContainer.createEmbeddedView(placeholderTemplate,\n        /** @type {?} */\n        placeholderConfig.context);\n        placeholder = this._placeholderRef.rootNodes[0];\n      } else {\n        placeholder = deepCloneNode(this._rootElement);\n      }\n\n      placeholder.classList.add('cdk-drag-placeholder');\n      return placeholder;\n    }\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @private\n     * @param {?} referenceElement Element that initiated the dragging.\n     * @param {?} event Event that initiated the dragging.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getPointerPositionInElement\",\n    value: function _getPointerPositionInElement(referenceElement, event) {\n      /** @type {?} */\n      var elementRect = this._rootElement.getBoundingClientRect();\n      /** @type {?} */\n\n\n      var handleElement = referenceElement === this._rootElement ? null : referenceElement;\n      /** @type {?} */\n\n      var referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n      /** @type {?} */\n\n      var point = isTouchEvent(event) ? event.targetTouches[0] : event;\n      /** @type {?} */\n\n      var x = point.pageX - referenceRect.left - this._scrollPosition.left;\n      /** @type {?} */\n\n      var y = point.pageY - referenceRect.top - this._scrollPosition.top;\n      return {\n        x: referenceRect.left - elementRect.left + x,\n        y: referenceRect.top - elementRect.top + y\n      };\n    }\n    /**\n     * Determines the point of the page that was touched by the user.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getPointerPositionOnPage\",\n    value: function _getPointerPositionOnPage(event) {\n      // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n\n      /** @type {?} */\n      var point = isTouchEvent(event) ? event.touches[0] || event.changedTouches[0] : event;\n      return {\n        x: point.pageX - this._scrollPosition.left,\n        y: point.pageY - this._scrollPosition.top\n      };\n    }\n    /**\n     * Gets the pointer position on the page, accounting for any position constraints.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getConstrainedPointerPosition\",\n    value: function _getConstrainedPointerPosition(event) {\n      /** @type {?} */\n      var point = this._getPointerPositionOnPage(event);\n      /** @type {?} */\n\n\n      var dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n\n      if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n        point.y = this._pickupPositionOnPage.y;\n      } else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n        point.x = this._pickupPositionOnPage.x;\n      }\n\n      if (this._boundaryRect) {\n        var _this$_pickupPosition = this._pickupPositionInElement,\n            pickupX = _this$_pickupPosition.x,\n            pickupY = _this$_pickupPosition.y;\n        /** @type {?} */\n\n        var boundaryRect = this._boundaryRect;\n        /** @type {?} */\n\n        var previewRect =\n        /** @type {?} */\n        this._previewRect;\n        /** @type {?} */\n\n        var minY = boundaryRect.top + pickupY;\n        /** @type {?} */\n\n        var maxY = boundaryRect.bottom - (previewRect.height - pickupY);\n        /** @type {?} */\n\n        var minX = boundaryRect.left + pickupX;\n        /** @type {?} */\n\n        var maxX = boundaryRect.right - (previewRect.width - pickupX);\n        point.x = clamp(point.x, minX, maxX);\n        point.y = clamp(point.y, minY, maxY);\n      }\n\n      return point;\n    }\n    /**\n     * Updates the current drag delta, based on the user's current pointer position on the page.\n     * @private\n     * @param {?} pointerPositionOnPage\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updatePointerDirectionDelta\",\n    value: function _updatePointerDirectionDelta(pointerPositionOnPage) {\n      var x = pointerPositionOnPage.x,\n          y = pointerPositionOnPage.y;\n      /** @type {?} */\n\n      var delta = this._pointerDirectionDelta;\n      /** @type {?} */\n\n      var positionSinceLastChange = this._pointerPositionAtLastDirectionChange; // Amount of pixels the user has dragged since the last time the direction changed.\n\n      /** @type {?} */\n\n      var changeX = Math.abs(x - positionSinceLastChange.x);\n      /** @type {?} */\n\n      var changeY = Math.abs(y - positionSinceLastChange.y); // Because we handle pointer events on a per-pixel basis, we don't want the delta\n      // to change for every pixel, otherwise anything that depends on it can look erratic.\n      // To make the delta more consistent, we track how much the user has moved since the last\n      // delta change and we only update it after it has reached a certain threshold.\n\n      if (changeX > this._config.pointerDirectionChangeThreshold) {\n        delta.x = x > positionSinceLastChange.x ? 1 : -1;\n        positionSinceLastChange.x = x;\n      }\n\n      if (changeY > this._config.pointerDirectionChangeThreshold) {\n        delta.y = y > positionSinceLastChange.y ? 1 : -1;\n        positionSinceLastChange.y = y;\n      }\n\n      return delta;\n    }\n    /**\n     * Toggles the native drag interactions, based on how many handles are registered.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_toggleNativeDragInteractions\",\n    value: function _toggleNativeDragInteractions() {\n      if (!this._rootElement || !this._handles) {\n        return;\n      }\n      /** @type {?} */\n\n\n      var shouldEnable = this.disabled || this._handles.length > 0;\n\n      if (shouldEnable !== this._nativeInteractionsEnabled) {\n        this._nativeInteractionsEnabled = shouldEnable;\n        toggleNativeDragInteractions(this._rootElement, shouldEnable);\n      }\n    }\n    /**\n     * Removes the manually-added event listeners from the root element.\n     * @private\n     * @param {?} element\n     * @return {?}\n     */\n\n  }, {\n    key: \"_removeRootElementListeners\",\n    value: function _removeRootElementListeners(element) {\n      element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n      element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n    }\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      /** @type {?} */\n      var newValue = coerceBooleanProperty(value);\n\n      if (newValue !== this._disabled) {\n        this._disabled = newValue;\n\n        this._toggleNativeDragInteractions();\n      }\n    }\n  }]);\n\n  return DragRef;\n}();\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param {?} x Desired position of the element along the X axis.\n * @param {?} y Desired position of the element along the Y axis.\n * @return {?}\n */\n\n\nfunction getTransform(x, y) {\n  // Round the transforms since some browsers will\n  // blur the elements for sub-pixel transforms.\n  return \"translate3d(\".concat(Math.round(x), \"px, \").concat(Math.round(y), \"px, 0)\");\n}\n/**\n * Creates a deep clone of an element.\n * @param {?} node\n * @return {?}\n */\n\n\nfunction deepCloneNode(node) {\n  /** @type {?} */\n  var clone =\n  /** @type {?} */\n  node.cloneNode(true); // Remove the `id` to avoid having multiple elements with the same id on the page.\n\n  clone.removeAttribute('id');\n  return clone;\n}\n/**\n * Clamps a value between a minimum and a maximum.\n * @param {?} value\n * @param {?} min\n * @param {?} max\n * @return {?}\n */\n\n\nfunction clamp(value, min, max) {\n  return Math.max(min, Math.min(max, value));\n}\n/**\n * Helper to remove an element from the DOM and to do all the necessary null checks.\n * @param {?} element Element to be removed.\n * @return {?}\n */\n\n\nfunction removeElement(element) {\n  if (element && element.parentNode) {\n    element.parentNode.removeChild(element);\n  }\n}\n/**\n * Determines whether an event is a touch event.\n * @param {?} event\n * @return {?}\n */\n\n\nfunction isTouchEvent(event) {\n  return event.type.startsWith('touch');\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Moves an item one index in an array to another.\n * @template T\n * @param {?} array Array in which to move the item.\n * @param {?} fromIndex Starting index of the item.\n * @param {?} toIndex Index to which the item should be moved.\n * @return {?}\n */\n\n\nfunction moveItemInArray(array, fromIndex, toIndex) {\n  /** @type {?} */\n  var from = clamp$1(fromIndex, array.length - 1);\n  /** @type {?} */\n\n  var to = clamp$1(toIndex, array.length - 1);\n\n  if (from === to) {\n    return;\n  }\n  /** @type {?} */\n\n\n  var target = array[from];\n  /** @type {?} */\n\n  var delta = to < from ? -1 : 1;\n\n  for (var i = from; i !== to; i += delta) {\n    array[i] = array[i + delta];\n  }\n\n  array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @template T\n * @param {?} currentArray Array from which to transfer the item.\n * @param {?} targetArray Array into which to put the item.\n * @param {?} currentIndex Index of the item in its current array.\n * @param {?} targetIndex Index at which to insert the item.\n * @return {?}\n */\n\n\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n  /** @type {?} */\n  var from = clamp$1(currentIndex, currentArray.length - 1);\n  /** @type {?} */\n\n  var to = clamp$1(targetIndex, targetArray.length);\n\n  if (currentArray.length) {\n    targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n  }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @template T\n * @param {?} currentArray Array from which to copy the item.\n * @param {?} targetArray Array into which is copy the item.\n * @param {?} currentIndex Index of the item in its current array.\n * @param {?} targetIndex Index at which to insert the item.\n *\n * @return {?}\n */\n\n\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n  /** @type {?} */\n  var to = clamp$1(targetIndex, targetArray.length);\n\n  if (currentArray.length) {\n    targetArray.splice(to, 0, currentArray[currentIndex]);\n  }\n}\n/**\n * Clamps a number between zero and a maximum.\n * @param {?} value\n * @param {?} max\n * @return {?}\n */\n\n\nfunction clamp$1(value, max) {\n  return Math.max(0, Math.min(max, value));\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Counter used to generate unique ids for drop refs.\n * @type {?}\n */\n\n\nvar _uniqueIdCounter = 0;\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n * @type {?}\n */\n\nvar DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n * \\@docs-private\n * @template T\n */\n\nvar DropListRef = /*#__PURE__*/function () {\n  /**\n   * @param {?} element\n   * @param {?} _dragDropRegistry\n   * @param {?} _document\n   */\n  function DropListRef(element, _dragDropRegistry, _document) {\n    _classCallCheck(this, DropListRef);\n\n    this._dragDropRegistry = _dragDropRegistry;\n    /**\n     * Unique ID for the drop list.\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 8.0.0\n     */\n\n    this.id = \"cdk-drop-list-ref-\".concat(_uniqueIdCounter++);\n    /**\n     * Whether starting a dragging sequence from this container is disabled.\n     */\n\n    this.disabled = false;\n    /**\n     * Function that is used to determine whether an item\n     * is allowed to be moved into a drop container.\n     */\n\n    this.enterPredicate = function () {\n      return true;\n    };\n    /**\n     * Emits right before dragging has started.\n     */\n\n\n    this.beforeStarted = new Subject();\n    /**\n     * Emits when the user has moved a new drag item into this container.\n     */\n\n    this.entered = new Subject();\n    /**\n     * Emits when the user removes an item from the container\n     * by dragging it into another container.\n     */\n\n    this.exited = new Subject();\n    /**\n     * Emits when the user drops an item inside the container.\n     */\n\n    this.dropped = new Subject();\n    /**\n     * Emits as the user is swapping items while actively dragging.\n     */\n\n    this.sorted = new Subject();\n    /**\n     * Whether an item in the list is being dragged.\n     */\n\n    this._isDragging = false;\n    /**\n     * Cache of the dimensions of all the items inside the container.\n     */\n\n    this._itemPositions = [];\n    /**\n     * Keeps track of the item that was last swapped with the dragged item, as\n     * well as what direction the pointer was moving in when the swap occured.\n     */\n\n    this._previousSwap = {\n      drag:\n      /** @type {?} */\n      null,\n      delta: 0\n    };\n    /**\n     * Drop lists that are connected to the current one.\n     */\n\n    this._siblings = [];\n    /**\n     * Direction in which the list is oriented.\n     */\n\n    this._orientation = 'vertical';\n    /**\n     * Connected siblings that currently have a dragged item.\n     */\n\n    this._activeSiblings = new Set();\n    /**\n     * Layout direction of the drop list.\n     */\n\n    this._direction = 'ltr';\n\n    _dragDropRegistry.registerDropContainer(this);\n\n    this._document = _document;\n    this.element = element instanceof ElementRef ? element.nativeElement : element;\n  }\n  /**\n   * Removes the drop list functionality from the DOM element.\n   * @return {?}\n   */\n\n\n  _createClass(DropListRef, [{\n    key: \"dispose\",\n    value: function dispose() {\n      this.beforeStarted.complete();\n      this.entered.complete();\n      this.exited.complete();\n      this.dropped.complete();\n      this.sorted.complete();\n\n      this._activeSiblings.clear();\n\n      this._dragDropRegistry.removeDropContainer(this);\n    }\n    /**\n     * Whether an item from this list is currently being dragged.\n     * @return {?}\n     */\n\n  }, {\n    key: \"isDragging\",\n    value: function isDragging() {\n      return this._isDragging;\n    }\n    /**\n     * Starts dragging an item.\n     * @return {?}\n     */\n\n  }, {\n    key: \"start\",\n    value: function start() {\n      var _this5 = this;\n\n      this.beforeStarted.next();\n      this._isDragging = true;\n      this._activeDraggables = this._draggables.slice();\n\n      this._cacheOwnPosition();\n\n      this._cacheItemPositions();\n\n      this._siblings.forEach(function (sibling) {\n        return sibling._startReceiving(_this5);\n      });\n    }\n    /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @param {?} item Item that was moved into the container.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @return {?}\n     */\n\n  }, {\n    key: \"enter\",\n    value: function enter(item, pointerX, pointerY) {\n      this.entered.next({\n        item: item,\n        container: this\n      });\n      this.start(); // We use the coordinates of where the item entered the drop\n      // zone to figure out at which index it should be inserted.\n\n      /** @type {?} */\n\n      var newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n      /** @type {?} */\n\n\n      var currentIndex = this._activeDraggables.indexOf(item);\n      /** @type {?} */\n\n\n      var newPositionReference = this._activeDraggables[newIndex];\n      /** @type {?} */\n\n      var placeholder = item.getPlaceholderElement(); // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n      // into another container and back again), we have to ensure that it isn't duplicated.\n\n      if (currentIndex > -1) {\n        this._activeDraggables.splice(currentIndex, 1);\n      } // Don't use items that are being dragged as a reference, because\n      // their element has been moved down to the bottom of the body.\n\n\n      if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n        /** @type {?} */\n        var element = newPositionReference.getRootElement();\n\n        /** @type {?} */\n        element.parentElement.insertBefore(placeholder, element);\n\n        this._activeDraggables.splice(newIndex, 0, item);\n      } else {\n        this.element.appendChild(placeholder);\n\n        this._activeDraggables.push(item);\n      } // The transform needs to be cleared so it doesn't throw off the measurements.\n\n\n      placeholder.style.transform = ''; // Note that the positions were already cached when we called `start` above,\n      // but we need to refresh them since the amount of items has changed.\n\n      this._cacheItemPositions();\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param {?} item Item that was dragged out.\n     * @return {?}\n     */\n\n  }, {\n    key: \"exit\",\n    value: function exit(item) {\n      this._reset();\n\n      this.exited.next({\n        item: item,\n        container: this\n      });\n    }\n    /**\n     * Drops an item into this container.\n     * @param {?} item Item being dropped into the container.\n     * @param {?} currentIndex Index at which the item should be inserted.\n     * @param {?} previousContainer Container from which the item got dragged in.\n     * @param {?} isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @return {?}\n     */\n\n  }, {\n    key: \"drop\",\n    value: function drop(item, currentIndex, previousContainer, isPointerOverContainer) {\n      this._reset();\n\n      this.dropped.next({\n        item: item,\n        currentIndex: currentIndex,\n        previousIndex: previousContainer.getItemIndex(item),\n        container: this,\n        previousContainer: previousContainer,\n        isPointerOverContainer: isPointerOverContainer\n      });\n    }\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} items Items that are a part of this list.\n     * @return {THIS}\n     */\n\n  }, {\n    key: \"withItems\",\n    value: function withItems(items) {\n      var _this6 = this;\n\n      /** @type {?} */\n      this._draggables = items;\n      items.forEach(function (item) {\n        return item._withDropContainer(\n        /** @type {?} */\n        _this6);\n      });\n      return (\n        /** @type {?} */\n        this\n      );\n    }\n    /**\n     * Sets the layout direction of the drop list.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} direction\n     * @return {THIS}\n     */\n\n  }, {\n    key: \"withDirection\",\n    value: function withDirection(direction) {\n      /** @type {?} */\n      this._direction = direction;\n      return (\n        /** @type {?} */\n        this\n      );\n    }\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} connectedTo Other containers that the current containers should be connected to.\n     * @return {THIS}\n     */\n\n  }, {\n    key: \"connectedTo\",\n    value: function connectedTo(_connectedTo) {\n      /** @type {?} */\n      this._siblings = _connectedTo.slice();\n      return (\n        /** @type {?} */\n        this\n      );\n    }\n    /**\n     * Sets the orientation of the container.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} orientation New orientation for the container.\n     * @return {THIS}\n     */\n\n  }, {\n    key: \"withOrientation\",\n    value: function withOrientation(orientation) {\n      /** @type {?} */\n      this._orientation = orientation;\n      return (\n        /** @type {?} */\n        this\n      );\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @param {?} item Item whose index should be determined.\n     * @return {?}\n     */\n\n  }, {\n    key: \"getItemIndex\",\n    value: function getItemIndex(item) {\n      if (!this._isDragging) {\n        return this._draggables.indexOf(item);\n      } // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n      // The rest of the logic still stands no matter what orientation we're in, however\n      // we need to invert the array when determining the index.\n\n      /** @type {?} */\n\n\n      var items = this._orientation === 'horizontal' && this._direction === 'rtl' ? this._itemPositions.slice().reverse() : this._itemPositions;\n      return findIndex(items, function (currentItem) {\n        return currentItem.drag === item;\n      });\n    }\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     * @return {?}\n     */\n\n  }, {\n    key: \"isReceiving\",\n    value: function isReceiving() {\n      return this._activeSiblings.size > 0;\n    }\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param {?} item Item to be sorted.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @param {?} pointerDelta Direction in which the pointer is moving along each axis.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_sortItem\",\n    value: function _sortItem(item, pointerX, pointerY, pointerDelta) {\n      // Don't sort the item if it's out of range.\n      if (!this._isPointerNearDropContainer(pointerX, pointerY)) {\n        return;\n      }\n      /** @type {?} */\n\n\n      var siblings = this._itemPositions;\n      /** @type {?} */\n\n      var newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n\n      if (newIndex === -1 && siblings.length > 0) {\n        return;\n      }\n      /** @type {?} */\n\n\n      var isHorizontal = this._orientation === 'horizontal';\n      /** @type {?} */\n\n      var currentIndex = findIndex(siblings, function (currentItem) {\n        return currentItem.drag === item;\n      });\n      /** @type {?} */\n\n      var siblingAtNewPosition = siblings[newIndex];\n      /** @type {?} */\n\n      var currentPosition = siblings[currentIndex].clientRect;\n      /** @type {?} */\n\n      var newPosition = siblingAtNewPosition.clientRect;\n      /** @type {?} */\n\n      var delta = currentIndex > newIndex ? 1 : -1;\n      this._previousSwap.drag = siblingAtNewPosition.drag;\n      this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y; // How many pixels the item's placeholder should be offset.\n\n      /** @type {?} */\n\n      var itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta); // How many pixels all the other items should be offset.\n\n      /** @type {?} */\n\n\n      var siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta); // Save the previous order of the items before moving the item to its new index.\n      // We use this to check whether an item has been moved as a result of the sorting.\n\n      /** @type {?} */\n\n\n      var oldOrder = siblings.slice(); // Shuffle the array in place.\n\n      moveItemInArray(siblings, currentIndex, newIndex);\n      this.sorted.next({\n        previousIndex: currentIndex,\n        currentIndex: newIndex,\n        container: this,\n        item: item\n      });\n      siblings.forEach(function (sibling, index) {\n        // Don't do anything if the position hasn't changed.\n        if (oldOrder[index] === sibling) {\n          return;\n        }\n        /** @type {?} */\n\n\n        var isDraggedItem = sibling.drag === item;\n        /** @type {?} */\n\n        var offset = isDraggedItem ? itemOffset : siblingOffset;\n        /** @type {?} */\n\n        var elementToOffset = isDraggedItem ? item.getPlaceholderElement() : sibling.drag.getRootElement(); // Update the offset to reflect the new position.\n\n        sibling.offset += offset; // Since we're moving the items with a `transform`, we need to adjust their cached\n        // client rects to reflect their new position, as well as swap their positions in the cache.\n        // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n        // elements may be mid-animation which will give us a wrong result.\n\n        if (isHorizontal) {\n          // Round the transforms since some browsers will\n          // blur the elements, for sub-pixel transforms.\n          elementToOffset.style.transform = \"translate3d(\".concat(Math.round(sibling.offset), \"px, 0, 0)\");\n          adjustClientRect(sibling.clientRect, 0, offset);\n        } else {\n          elementToOffset.style.transform = \"translate3d(0, \".concat(Math.round(sibling.offset), \"px, 0)\");\n          adjustClientRect(sibling.clientRect, offset, 0);\n        }\n      });\n    }\n    /**\n     * Caches the position of the drop list.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_cacheOwnPosition\",\n    value: function _cacheOwnPosition() {\n      this._clientRect = this.element.getBoundingClientRect();\n    }\n    /**\n     * Refreshes the position cache of the items and sibling containers.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_cacheItemPositions\",\n    value: function _cacheItemPositions() {\n      var _this7 = this;\n\n      /** @type {?} */\n      var isHorizontal = this._orientation === 'horizontal';\n      this._itemPositions = this._activeDraggables.map(function (drag) {\n        /** @type {?} */\n        var elementToMeasure = _this7._dragDropRegistry.isDragging(drag) ? // If the element is being dragged, we have to measure the\n        // placeholder, because the element is hidden.\n        drag.getPlaceholderElement() : drag.getRootElement();\n        /** @type {?} */\n\n        var clientRect = elementToMeasure.getBoundingClientRect();\n        return {\n          drag: drag,\n          offset: 0,\n          // We need to clone the `clientRect` here, because all the values on it are readonly\n          // and we need to be able to update them. Also we can't use a spread here, because\n          // the values on a `ClientRect` aren't own properties. See:\n          // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n          clientRect: {\n            top: clientRect.top,\n            right: clientRect.right,\n            bottom: clientRect.bottom,\n            left: clientRect.left,\n            width: clientRect.width,\n            height: clientRect.height\n          }\n        };\n      }).sort(function (a, b) {\n        return isHorizontal ? a.clientRect.left - b.clientRect.left : a.clientRect.top - b.clientRect.top;\n      });\n    }\n    /**\n     * Resets the container to its initial state.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_reset\",\n    value: function _reset() {\n      var _this8 = this;\n\n      this._isDragging = false; // TODO(crisbeto): may have to wait for the animations to finish.\n\n      this._activeDraggables.forEach(function (item) {\n        return item.getRootElement().style.transform = '';\n      });\n\n      this._siblings.forEach(function (sibling) {\n        return sibling._stopReceiving(_this8);\n      });\n\n      this._activeDraggables = [];\n      this._itemPositions = [];\n      this._previousSwap.drag = null;\n      this._previousSwap.delta = 0;\n    }\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @private\n     * @param {?} currentIndex Index of the item currently being dragged.\n     * @param {?} siblings All of the items in the list.\n     * @param {?} delta Direction in which the user is moving.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getSiblingOffsetPx\",\n    value: function _getSiblingOffsetPx(currentIndex, siblings, delta) {\n      /** @type {?} */\n      var isHorizontal = this._orientation === 'horizontal';\n      /** @type {?} */\n\n      var currentPosition = siblings[currentIndex].clientRect;\n      /** @type {?} */\n\n      var immediateSibling = siblings[currentIndex + delta * -1];\n      /** @type {?} */\n\n      var siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n\n      if (immediateSibling) {\n        /** @type {?} */\n        var start = isHorizontal ? 'left' : 'top';\n        /** @type {?} */\n\n        var end = isHorizontal ? 'right' : 'bottom'; // Get the spacing between the start of the current item and the end of the one immediately\n        // after it in the direction in which the user is dragging, or vice versa. We add it to the\n        // offset in order to push the element to where it will be when it's inline and is influenced\n        // by the `margin` of its siblings.\n\n        if (delta === -1) {\n          siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n        } else {\n          siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n        }\n      }\n\n      return siblingOffset;\n    }\n    /**\n     * Checks whether the pointer coordinates are close to the drop container.\n     * @private\n     * @param {?} pointerX Coordinates along the X axis.\n     * @param {?} pointerY Coordinates along the Y axis.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isPointerNearDropContainer\",\n    value: function _isPointerNearDropContainer(pointerX, pointerY) {\n      var _this$_clientRect = this._clientRect,\n          top = _this$_clientRect.top,\n          right = _this$_clientRect.right,\n          bottom = _this$_clientRect.bottom,\n          left = _this$_clientRect.left,\n          width = _this$_clientRect.width,\n          height = _this$_clientRect.height;\n      /** @type {?} */\n\n      var xThreshold = width * DROP_PROXIMITY_THRESHOLD;\n      /** @type {?} */\n\n      var yThreshold = height * DROP_PROXIMITY_THRESHOLD;\n      return pointerY > top - yThreshold && pointerY < bottom + yThreshold && pointerX > left - xThreshold && pointerX < right + xThreshold;\n    }\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @private\n     * @param {?} currentPosition Current position of the item.\n     * @param {?} newPosition Position of the item where the current item should be moved.\n     * @param {?} delta Direction in which the user is moving.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getItemOffsetPx\",\n    value: function _getItemOffsetPx(currentPosition, newPosition, delta) {\n      /** @type {?} */\n      var isHorizontal = this._orientation === 'horizontal';\n      /** @type {?} */\n\n      var itemOffset = isHorizontal ? newPosition.left - currentPosition.left : newPosition.top - currentPosition.top; // Account for differences in the item width/height.\n\n      if (delta === -1) {\n        itemOffset += isHorizontal ? newPosition.width - currentPosition.width : newPosition.height - currentPosition.height;\n      }\n\n      return itemOffset;\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @private\n     * @param {?} item Item that is being sorted.\n     * @param {?} pointerX Position of the user's pointer along the X axis.\n     * @param {?} pointerY Position of the user's pointer along the Y axis.\n     * @param {?=} delta Direction in which the user is moving their pointer.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getItemIndexFromPointerPosition\",\n    value: function _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n      var _this9 = this;\n\n      /** @type {?} */\n      var isHorizontal = this._orientation === 'horizontal';\n      return findIndex(this._itemPositions, function (_ref2, _, array) {\n        var drag = _ref2.drag,\n            clientRect = _ref2.clientRect;\n\n        if (drag === item) {\n          // If there's only one item left in the container, it must be\n          // the dragged item itself so we use it as a reference.\n          return array.length < 2;\n        }\n\n        if (delta) {\n          /** @type {?} */\n          var direction = isHorizontal ? delta.x : delta.y; // If the user is still hovering over the same item as last time, and they didn't change\n          // the direction in which they're dragging, we don't consider it a direction swap.\n\n          if (drag === _this9._previousSwap.drag && direction === _this9._previousSwap.delta) {\n            return false;\n          }\n        }\n\n        return isHorizontal ? // Round these down since most browsers report client rects with\n        // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n        pointerX >= Math.floor(clientRect.left) && pointerX <= Math.floor(clientRect.right) : pointerY >= Math.floor(clientRect.top) && pointerY <= Math.floor(clientRect.bottom);\n      });\n    }\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param {?} x Pointer position along the X axis.\n     * @param {?} y Pointer position along the Y axis.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isOverContainer\",\n    value: function _isOverContainer(x, y) {\n      return isInsideClientRect(this._clientRect, x, y);\n    }\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param {?} item Drag item that is being moved.\n     * @param {?} x Position of the item along the X axis.\n     * @param {?} y Position of the item along the Y axis.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getSiblingContainerFromPosition\",\n    value: function _getSiblingContainerFromPosition(item, x, y) {\n      return this._siblings.find(function (sibling) {\n        return sibling._canReceive(item, x, y);\n      });\n    }\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param {?} item Item that is being dragged into the list.\n     * @param {?} x Position of the item along the X axis.\n     * @param {?} y Position of the item along the Y axis.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_canReceive\",\n    value: function _canReceive(item, x, y) {\n      if (!this.enterPredicate(item, this) || !isInsideClientRect(this._clientRect, x, y)) {\n        return false;\n      }\n      /** @type {?} */\n\n\n      var elementFromPoint = this._document.elementFromPoint(x, y); // If there's no element at the pointer position, then\n      // the client rect is probably scrolled out of the view.\n\n\n      if (!elementFromPoint) {\n        return false;\n      } // The `ClientRect`, that we're using to find the container over which the user is\n      // hovering, doesn't give us any information on whether the element has been scrolled\n      // out of the view or whether it's overlapping with other containers. This means that\n      // we could end up transferring the item into a container that's invisible or is positioned\n      // below another one. We use the result from `elementFromPoint` to get the top-most element\n      // at the pointer position and to find whether it's one of the intersecting drop containers.\n\n\n      return elementFromPoint === this.element || this.element.contains(elementFromPoint);\n    }\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param {?} sibling Sibling in which dragging has started.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_startReceiving\",\n    value: function _startReceiving(sibling) {\n      /** @type {?} */\n      var activeSiblings = this._activeSiblings;\n\n      if (!activeSiblings.has(sibling)) {\n        activeSiblings.add(sibling);\n\n        this._cacheOwnPosition();\n      }\n    }\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param {?} sibling Sibling whose dragging has stopped.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_stopReceiving\",\n    value: function _stopReceiving(sibling) {\n      this._activeSiblings.delete(sibling);\n    }\n  }]);\n\n  return DropListRef;\n}();\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param {?} clientRect `ClientRect` that should be updated.\n * @param {?} top Amount to add to the `top` position.\n * @param {?} left Amount to add to the `left` position.\n * @return {?}\n */\n\n\nfunction adjustClientRect(clientRect, top, left) {\n  clientRect.top += top;\n  clientRect.bottom = clientRect.top + clientRect.height;\n  clientRect.left += left;\n  clientRect.right = clientRect.left + clientRect.width;\n}\n/**\n * Finds the index of an item that matches a predicate function. Used as an equivalent\n * of `Array.prototype.find` which isn't part of the standard Google typings.\n * @template T\n * @param {?} array Array in which to look for matches.\n * @param {?} predicate Function used to determine whether an item is a match.\n * @return {?}\n */\n\n\nfunction findIndex(array, predicate) {\n  for (var i = 0; i < array.length; i++) {\n    if (predicate(array[i], i, array)) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param {?} clientRect ClientRect that is being checked.\n * @param {?} x Coordinates along the X axis.\n * @param {?} y Coordinates along the Y axis.\n * @return {?}\n */\n\n\nfunction isInsideClientRect(clientRect, x, y) {\n  var top = clientRect.top,\n      bottom = clientRect.bottom,\n      left = clientRect.left,\n      right = clientRect.right;\n  return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Event options that can be used to bind an active, capturing event.\n * @type {?}\n */\n\n\nvar activeCapturingEventOptions = normalizePassiveListenerOptions({\n  passive: false,\n  capture: true\n});\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * \\@docs-private\n * @template I, C\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\n\nvar DragDropRegistry = /*#__PURE__*/function () {\n  /**\n   * @param {?} _ngZone\n   * @param {?} _document\n   */\n  function DragDropRegistry(_ngZone, _document) {\n    var _this10 = this;\n\n    _classCallCheck(this, DragDropRegistry);\n\n    this._ngZone = _ngZone;\n    /**\n     * Registered drop container instances.\n     */\n\n    this._dropInstances = new Set();\n    /**\n     * Registered drag item instances.\n     */\n\n    this._dragInstances = new Set();\n    /**\n     * Drag item instances that are currently being dragged.\n     */\n\n    this._activeDragInstances = new Set();\n    /**\n     * Keeps track of the event listeners that we've bound to the `document`.\n     */\n\n    this._globalListeners = new Map();\n    /**\n     * Emits the `touchmove` or `mousemove` events that are dispatched\n     * while the user is dragging a drag item instance.\n     */\n\n    this.pointerMove = new Subject();\n    /**\n     * Emits the `touchend` or `mouseup` events that are dispatched\n     * while the user is dragging a drag item instance.\n     */\n\n    this.pointerUp = new Subject();\n    /**\n     * Event listener that will prevent the default browser action while the user is dragging.\n     * @param event Event whose default action should be prevented.\n     */\n\n    this._preventDefaultWhileDragging = function (event) {\n      if (_this10._activeDragInstances.size) {\n        event.preventDefault();\n      }\n    };\n\n    this._document = _document;\n  }\n  /**\n   * Adds a drop container to the registry.\n   * @param {?} drop\n   * @return {?}\n   */\n\n\n  _createClass(DragDropRegistry, [{\n    key: \"registerDropContainer\",\n    value: function registerDropContainer(drop) {\n      if (!this._dropInstances.has(drop)) {\n        if (this.getDropContainer(drop.id)) {\n          throw Error(\"Drop instance with id \\\"\".concat(drop.id, \"\\\" has already been registered.\"));\n        }\n\n        this._dropInstances.add(drop);\n      }\n    }\n    /**\n     * Adds a drag item instance to the registry.\n     * @param {?} drag\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerDragItem\",\n    value: function registerDragItem(drag) {\n      var _this11 = this;\n\n      this._dragInstances.add(drag); // The `touchmove` event gets bound once, ahead of time, because WebKit\n      // won't preventDefault on a dynamically-added `touchmove` listener.\n      // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n\n\n      if (this._dragInstances.size === 1) {\n        this._ngZone.runOutsideAngular(function () {\n          // The event handler has to be explicitly active,\n          // because newer browsers make it passive by default.\n          _this11._document.addEventListener('touchmove', _this11._preventDefaultWhileDragging, activeCapturingEventOptions);\n        });\n      }\n    }\n    /**\n     * Removes a drop container from the registry.\n     * @param {?} drop\n     * @return {?}\n     */\n\n  }, {\n    key: \"removeDropContainer\",\n    value: function removeDropContainer(drop) {\n      this._dropInstances.delete(drop);\n    }\n    /**\n     * Removes a drag item instance from the registry.\n     * @param {?} drag\n     * @return {?}\n     */\n\n  }, {\n    key: \"removeDragItem\",\n    value: function removeDragItem(drag) {\n      this._dragInstances.delete(drag);\n\n      this.stopDragging(drag);\n\n      if (this._dragInstances.size === 0) {\n        this._document.removeEventListener('touchmove', this._preventDefaultWhileDragging, activeCapturingEventOptions);\n      }\n    }\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param {?} drag Drag instance which is being dragged.\n     * @param {?} event Event that initiated the dragging.\n     * @return {?}\n     */\n\n  }, {\n    key: \"startDragging\",\n    value: function startDragging(drag, event) {\n      var _this12 = this;\n\n      this._activeDragInstances.add(drag);\n\n      if (this._activeDragInstances.size === 1) {\n        /** @type {?} */\n        var _isTouchEvent = event.type.startsWith('touch');\n        /** @type {?} */\n\n\n        var moveEvent = _isTouchEvent ? 'touchmove' : 'mousemove';\n        /** @type {?} */\n\n        var upEvent = _isTouchEvent ? 'touchend' : 'mouseup'; // We explicitly bind __active__ listeners here, because newer browsers will default to\n        // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n        // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n\n        this._globalListeners.set(moveEvent, {\n          handler: function handler(e) {\n            return _this12.pointerMove.next(\n            /** @type {?} */\n            e);\n          },\n          options: activeCapturingEventOptions\n        }).set(upEvent, {\n          handler: function handler(e) {\n            return _this12.pointerUp.next(\n            /** @type {?} */\n            e);\n          },\n          options: true\n        }) // Preventing the default action on `mousemove` isn't enough to disable text selection\n        // on Safari so we need to prevent the selection event as well. Alternatively this can\n        // be done by setting `user-select: none` on the `body`, however it has causes a style\n        // recalculation which can be expensive on pages with a lot of elements.\n        .set('selectstart', {\n          handler: this._preventDefaultWhileDragging,\n          options: activeCapturingEventOptions\n        }); // TODO(crisbeto): prevent mouse wheel scrolling while\n        // dragging until we've set up proper scroll handling.\n\n\n        if (!_isTouchEvent) {\n          this._globalListeners.set('wheel', {\n            handler: this._preventDefaultWhileDragging,\n            options: activeCapturingEventOptions\n          });\n        }\n\n        this._ngZone.runOutsideAngular(function () {\n          _this12._globalListeners.forEach(function (config, name) {\n            _this12._document.addEventListener(name, config.handler, config.options);\n          });\n        });\n      }\n    }\n    /**\n     * Stops dragging a drag item instance.\n     * @param {?} drag\n     * @return {?}\n     */\n\n  }, {\n    key: \"stopDragging\",\n    value: function stopDragging(drag) {\n      this._activeDragInstances.delete(drag);\n\n      if (this._activeDragInstances.size === 0) {\n        this._clearGlobalListeners();\n      }\n    }\n    /**\n     * Gets whether a drag item instance is currently being dragged.\n     * @param {?} drag\n     * @return {?}\n     */\n\n  }, {\n    key: \"isDragging\",\n    value: function isDragging(drag) {\n      return this._activeDragInstances.has(drag);\n    }\n    /**\n     * Gets a drop container by its id.\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 8.0.0\n     * @param {?} id\n     * @return {?}\n     */\n\n  }, {\n    key: \"getDropContainer\",\n    value: function getDropContainer(id) {\n      return Array.from(this._dropInstances).find(function (instance) {\n        return instance.id === id;\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      var _this13 = this;\n\n      this._dragInstances.forEach(function (instance) {\n        return _this13.removeDragItem(instance);\n      });\n\n      this._dropInstances.forEach(function (instance) {\n        return _this13.removeDropContainer(instance);\n      });\n\n      this._clearGlobalListeners();\n\n      this.pointerMove.complete();\n      this.pointerUp.complete();\n    }\n    /**\n     * Clears out the global event listeners from the `document`.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_clearGlobalListeners\",\n    value: function _clearGlobalListeners() {\n      var _this14 = this;\n\n      this._globalListeners.forEach(function (config, name) {\n        _this14._document.removeEventListener(name, config.handler, config.options);\n      });\n\n      this._globalListeners.clear();\n    }\n  }]);\n\n  return DragDropRegistry;\n}();\n\nDragDropRegistry.ɵfac = function DragDropRegistry_Factory(t) {\n  return new (t || DragDropRegistry)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT));\n};\n\nDragDropRegistry.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: DragDropRegistry,\n  factory: DragDropRegistry.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nDragDropRegistry.ctorParameters = function () {\n  return [{\n    type: NgZone\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }];\n};\n/** @nocollapse */\n\n\nDragDropRegistry.ngInjectableDef = defineInjectable({\n  factory: function DragDropRegistry_Factory() {\n    return new DragDropRegistry(inject(NgZone), inject(DOCUMENT));\n  },\n  token: DragDropRegistry,\n  providedIn: \"root\"\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(DragDropRegistry, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Default configuration to be used when creating a `DragRef`.\n * @type {?}\n */\n\n\nvar DEFAULT_CONFIG = {\n  dragStartThreshold: 5,\n  pointerDirectionChangeThreshold: 5\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\n\nvar DragDrop = /*#__PURE__*/function () {\n  /**\n   * @param {?} _document\n   * @param {?} _ngZone\n   * @param {?} _viewportRuler\n   * @param {?} _dragDropRegistry\n   */\n  function DragDrop(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n    _classCallCheck(this, DragDrop);\n\n    this._document = _document;\n    this._ngZone = _ngZone;\n    this._viewportRuler = _viewportRuler;\n    this._dragDropRegistry = _dragDropRegistry;\n  }\n  /**\n   * Turns an element into a draggable item.\n   * @template T\n   * @param {?} element Element to which to attach the dragging functionality.\n   * @param {?=} config Object used to configure the dragging behavior.\n   * @return {?}\n   */\n\n\n  _createClass(DragDrop, [{\n    key: \"createDrag\",\n    value: function createDrag(element) {\n      var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_CONFIG;\n      return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n    }\n    /**\n     * Turns an element into a drop list.\n     * @template T\n     * @param {?} element Element to which to attach the drop list functionality.\n     * @return {?}\n     */\n\n  }, {\n    key: \"createDropList\",\n    value: function createDropList(element) {\n      return new DropListRef(element, this._dragDropRegistry, this._document);\n    }\n  }]);\n\n  return DragDrop;\n}();\n\nDragDrop.ɵfac = function DragDrop_Factory(t) {\n  return new (t || DragDrop)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(DragDropRegistry));\n};\n\nDragDrop.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: DragDrop,\n  factory: DragDrop.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nDragDrop.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: NgZone\n  }, {\n    type: ViewportRuler\n  }, {\n    type: DragDropRegistry\n  }];\n};\n/** @nocollapse */\n\n\nDragDrop.ngInjectableDef = defineInjectable({\n  factory: function DragDrop_Factory() {\n    return new DragDrop(inject(DOCUMENT), inject(NgZone), inject(ViewportRuler), inject(DragDropRegistry));\n  },\n  token: DragDrop,\n  providedIn: \"root\"\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(DragDrop, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc1.ViewportRuler\n    }, {\n      type: DragDropRegistry\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Injection token that is used to provide a CdkDropList instance to CdkDrag.\n * Used for avoiding circular imports.\n * @type {?}\n */\n\n\nvar CDK_DROP_LIST = new InjectionToken('CDK_DROP_LIST');\n/**\n * Injection token that is used to provide a CdkDropList instance to CdkDrag.\n * Used for avoiding circular imports.\n * @deprecated Use `CDK_DROP_LIST` instead.\n * \\@breaking-change 8.0.0\n * @type {?}\n */\n\nvar CDK_DROP_LIST_CONTAINER = CDK_DROP_LIST;\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * \\@docs-private\n * @type {?}\n */\n\nvar CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Handle that can be used to drag and CdkDrag instance.\n */\n\nvar CdkDragHandle = /*#__PURE__*/function () {\n  /**\n   * @param {?} element\n   * @param {?=} parentDrag\n   */\n  function CdkDragHandle(element, parentDrag) {\n    _classCallCheck(this, CdkDragHandle);\n\n    this.element = element;\n    /**\n     * Emits when the state of the handle has changed.\n     */\n\n    this._stateChanges = new Subject();\n    this._disabled = false;\n    this._parentDrag = parentDrag;\n    toggleNativeDragInteractions(element.nativeElement, false);\n  }\n  /**\n   * Whether starting to drag through this handle is disabled.\n   * @return {?}\n   */\n\n\n  _createClass(CdkDragHandle, [{\n    key: \"ngOnDestroy\",\n\n    /**\n     * @return {?}\n     */\n    value: function ngOnDestroy() {\n      this._stateChanges.complete();\n    }\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this._disabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._disabled = coerceBooleanProperty(value);\n\n      this._stateChanges.next(this);\n    }\n  }]);\n\n  return CdkDragHandle;\n}();\n\nCdkDragHandle.ɵfac = function CdkDragHandle_Factory(t) {\n  return new (t || CdkDragHandle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_PARENT, 8));\n};\n\nCdkDragHandle.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkDragHandle,\n  selectors: [[\"\", \"cdkDragHandle\", \"\"]],\n  hostAttrs: [1, \"cdk-drag-handle\"],\n  inputs: {\n    disabled: [\"cdkDragHandleDisabled\", \"disabled\"]\n  }\n});\n/** @nocollapse */\n\nCdkDragHandle.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [CDK_DRAG_PARENT]\n    }, {\n      type: Optional\n    }]\n  }];\n};\n\nCdkDragHandle.propDecorators = {\n  disabled: [{\n    type: Input,\n    args: ['cdkDragHandleDisabled']\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CdkDragHandle, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkDragHandle]',\n      host: {\n        'class': 'cdk-drag-handle'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CDK_DRAG_PARENT]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, {\n    disabled: [{\n      type: Input,\n      args: ['cdkDragHandleDisabled']\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n * @template T\n */\n\n\nvar CdkDragPlaceholder =\n/**\n * @param {?} templateRef\n */\nfunction CdkDragPlaceholder(templateRef) {\n  _classCallCheck(this, CdkDragPlaceholder);\n\n  this.templateRef = templateRef;\n};\n\nCdkDragPlaceholder.ɵfac = function CdkDragPlaceholder_Factory(t) {\n  return new (t || CdkDragPlaceholder)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n};\n\nCdkDragPlaceholder.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkDragPlaceholder,\n  selectors: [[\"ng-template\", \"cdkDragPlaceholder\", \"\"]],\n  inputs: {\n    data: \"data\"\n  }\n});\n/** @nocollapse */\n\nCdkDragPlaceholder.ctorParameters = function () {\n  return [{\n    type: TemplateRef\n  }];\n};\n\nCdkDragPlaceholder.propDecorators = {\n  data: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CdkDragPlaceholder, [{\n    type: Directive,\n    args: [{\n      selector: 'ng-template[cdkDragPlaceholder]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }];\n  }, {\n    data: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n * @template T\n */\n\n\nvar CdkDragPreview =\n/**\n * @param {?} templateRef\n */\nfunction CdkDragPreview(templateRef) {\n  _classCallCheck(this, CdkDragPreview);\n\n  this.templateRef = templateRef;\n};\n\nCdkDragPreview.ɵfac = function CdkDragPreview_Factory(t) {\n  return new (t || CdkDragPreview)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n};\n\nCdkDragPreview.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkDragPreview,\n  selectors: [[\"ng-template\", \"cdkDragPreview\", \"\"]],\n  inputs: {\n    data: \"data\"\n  }\n});\n/** @nocollapse */\n\nCdkDragPreview.ctorParameters = function () {\n  return [{\n    type: TemplateRef\n  }];\n};\n\nCdkDragPreview.propDecorators = {\n  data: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CdkDragPreview, [{\n    type: Directive,\n    args: [{\n      selector: 'ng-template[cdkDragPreview]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }];\n  }, {\n    data: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Injection token that can be used to configure the behavior of `CdkDrag`.\n * @type {?}\n */\n\n\nvar CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG', {\n  providedIn: 'root',\n  factory: CDK_DRAG_CONFIG_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\n\nfunction CDK_DRAG_CONFIG_FACTORY() {\n  return {\n    dragStartThreshold: 5,\n    pointerDirectionChangeThreshold: 5\n  };\n}\n/**\n * Element that can be moved inside a CdkDropList container.\n * @template T\n */\n\n\nvar CdkDrag = /*#__PURE__*/function () {\n  /**\n   * @param {?} element\n   * @param {?} dropContainer\n   * @param {?} _document\n   * @param {?} _ngZone\n   * @param {?} _viewContainerRef\n   * @param {?} viewportRuler\n   * @param {?} dragDropRegistry\n   * @param {?} config\n   * @param {?} _dir\n   * @param {?=} dragDrop\n   * @param {?=} _changeDetectorRef\n   */\n  function CdkDrag(element, dropContainer, _document, _ngZone, _viewContainerRef, viewportRuler, dragDropRegistry, config, _dir,\n  /**\n   * @deprecated `viewportRuler`, `dragDropRegistry` and `_changeDetectorRef` parameters\n   * to be removed. Also `dragDrop` parameter to be made required.\n   * @breaking-change 8.0.0.\n   */\n  dragDrop, _changeDetectorRef) {\n    var _this15 = this;\n\n    _classCallCheck(this, CdkDrag);\n\n    this.element = element;\n    this.dropContainer = dropContainer;\n    this._document = _document;\n    this._ngZone = _ngZone;\n    this._viewContainerRef = _viewContainerRef;\n    this._dir = _dir;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._destroyed = new Subject();\n    this._disabled = false;\n    /**\n     * Emits when the user starts dragging the item.\n     */\n\n    this.started = new EventEmitter();\n    /**\n     * Emits when the user has released a drag item, before any animations have started.\n     */\n\n    this.released = new EventEmitter();\n    /**\n     * Emits when the user stops dragging an item in the container.\n     */\n\n    this.ended = new EventEmitter();\n    /**\n     * Emits when the user has moved the item into a new container.\n     */\n\n    this.entered = new EventEmitter();\n    /**\n     * Emits when the user removes the item its container by dragging it into another container.\n     */\n\n    this.exited = new EventEmitter();\n    /**\n     * Emits when the user drops the item inside a container.\n     */\n\n    this.dropped = new EventEmitter();\n    /**\n     * Emits as the user is dragging the item. Use with caution,\n     * because this event will fire for every pixel that the user has dragged.\n     */\n\n    this.moved = new Observable(function (observer) {\n      /** @type {?} */\n      var subscription = _this15._dragRef.moved.pipe(map(function (movedEvent) {\n        return {\n          source: _this15,\n          pointerPosition: movedEvent.pointerPosition,\n          event: movedEvent.event,\n          delta: movedEvent.delta\n        };\n      })).subscribe(observer);\n\n      return function () {\n        subscription.unsubscribe();\n      };\n    }); // @breaking-change 8.0.0 Remove null check once the paramter is made required.\n\n    if (dragDrop) {\n      this._dragRef = dragDrop.createDrag(element, config);\n    } else {\n      this._dragRef = new DragRef(element, config, _document, _ngZone, viewportRuler, dragDropRegistry);\n    }\n\n    this._dragRef.data = this;\n\n    this._syncInputs(this._dragRef);\n\n    this._handleEvents(this._dragRef);\n  }\n  /**\n   * Whether starting to drag this element is disabled.\n   * @return {?}\n   */\n\n\n  _createClass(CdkDrag, [{\n    key: \"getPlaceholderElement\",\n\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     * @return {?}\n     */\n    value: function getPlaceholderElement() {\n      return this._dragRef.getPlaceholderElement();\n    }\n    /**\n     * Returns the root draggable element.\n     * @return {?}\n     */\n\n  }, {\n    key: \"getRootElement\",\n    value: function getRootElement() {\n      return this._dragRef.getRootElement();\n    }\n    /**\n     * Resets a standalone drag item to its initial position.\n     * @return {?}\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this._dragRef.reset();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var _this16 = this;\n\n      // We need to wait for the zone to stabilize, in order for the reference\n      // element to be in the proper place in the DOM. This is mostly relevant\n      // for draggable elements inside portals since they get stamped out in\n      // their original DOM position and then they get transferred to the portal.\n      this._ngZone.onStable.asObservable().pipe(take(1), takeUntil(this._destroyed)).subscribe(function () {\n        _this16._updateRootElement(); // Listen for any newly-added handles.\n\n\n        _this16._handles.changes.pipe(startWith(_this16._handles), // Sync the new handles with the DragRef.\n        tap(function (handles) {\n          /** @type {?} */\n          var childHandleElements = handles.filter(function (handle) {\n            return handle._parentDrag === _this16;\n          }).map(function (handle) {\n            return handle.element;\n          });\n\n          _this16._dragRef.withHandles(childHandleElements);\n        }), // Listen if the state of any of the handles changes.\n        switchMap(function (handles) {\n          return merge.apply(void 0, _toConsumableArray(handles.map(function (item) {\n            return item._stateChanges;\n          })));\n        }), takeUntil(_this16._destroyed)).subscribe(function (handleInstance) {\n          // Enabled/disable the handle that changed in the DragRef.\n\n          /** @type {?} */\n          var dragRef = _this16._dragRef;\n          /** @type {?} */\n\n          var handle = handleInstance.element.nativeElement;\n          handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n        });\n      });\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      /** @type {?} */\n      var rootSelectorChange = changes['rootElementSelector']; // We don't have to react to the first change since it's being\n      // handled in `ngAfterViewInit` where it needs to be deferred.\n\n      if (rootSelectorChange && !rootSelectorChange.firstChange) {\n        this._updateRootElement();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._destroyed.next();\n\n      this._destroyed.complete();\n\n      this._dragRef.dispose();\n    }\n    /**\n     * Syncs the root element with the `DragRef`.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateRootElement\",\n    value: function _updateRootElement() {\n      /** @type {?} */\n      var element = this.element.nativeElement;\n      /** @type {?} */\n\n      var rootElement = this.rootElementSelector ? getClosestMatchingAncestor(element, this.rootElementSelector) : element;\n\n      if (rootElement && rootElement.nodeType !== this._document.ELEMENT_NODE) {\n        throw Error(\"cdkDrag must be attached to an element node. \" + \"Currently attached to \\\"\".concat(rootElement.nodeName, \"\\\".\"));\n      }\n\n      this._dragRef.withRootElement(rootElement || element);\n    }\n    /**\n     * Gets the boundary element, based on the `boundaryElementSelector`.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getBoundaryElement\",\n    value: function _getBoundaryElement() {\n      /** @type {?} */\n      var selector = this.boundaryElementSelector;\n      return selector ? getClosestMatchingAncestor(this.element.nativeElement, selector) : null;\n    }\n    /**\n     * Syncs the inputs of the CdkDrag with the options of the underlying DragRef.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n\n  }, {\n    key: \"_syncInputs\",\n    value: function _syncInputs(ref) {\n      var _this17 = this;\n\n      ref.beforeStarted.subscribe(function () {\n        if (!ref.isDragging()) {\n          /** @type {?} */\n          var dir = _this17._dir;\n          /** @type {?} */\n\n          var placeholder = _this17._placeholderTemplate ? {\n            template: _this17._placeholderTemplate.templateRef,\n            context: _this17._placeholderTemplate.data,\n            viewContainer: _this17._viewContainerRef\n          } : null;\n          /** @type {?} */\n\n          var preview = _this17._previewTemplate ? {\n            template: _this17._previewTemplate.templateRef,\n            context: _this17._previewTemplate.data,\n            viewContainer: _this17._viewContainerRef\n          } : null;\n          ref.disabled = _this17.disabled;\n          ref.lockAxis = _this17.lockAxis;\n          ref.withBoundaryElement(_this17._getBoundaryElement()).withPlaceholderTemplate(placeholder).withPreviewTemplate(preview);\n\n          if (dir) {\n            ref.withDirection(dir.value);\n          }\n        }\n      });\n    }\n    /**\n     * Handles the events from the underlying `DragRef`.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n\n  }, {\n    key: \"_handleEvents\",\n    value: function _handleEvents(ref) {\n      var _this18 = this;\n\n      ref.started.subscribe(function () {\n        _this18.started.emit({\n          source: _this18\n        }); // Since all of these events run outside of change detection,\n        // we need to ensure that everything is marked correctly.\n\n\n        if (_this18._changeDetectorRef) {\n          // @breaking-change 8.0.0 Remove null check for _changeDetectorRef\n          _this18._changeDetectorRef.markForCheck();\n        }\n      });\n      ref.released.subscribe(function () {\n        _this18.released.emit({\n          source: _this18\n        });\n      });\n      ref.ended.subscribe(function () {\n        _this18.ended.emit({\n          source: _this18\n        }); // Since all of these events run outside of change detection,\n        // we need to ensure that everything is marked correctly.\n\n\n        if (_this18._changeDetectorRef) {\n          // @breaking-change 8.0.0 Remove null check for _changeDetectorRef\n          _this18._changeDetectorRef.markForCheck();\n        }\n      });\n      ref.entered.subscribe(function (event) {\n        _this18.entered.emit({\n          container: event.container.data,\n          item: _this18\n        });\n      });\n      ref.exited.subscribe(function (event) {\n        _this18.exited.emit({\n          container: event.container.data,\n          item: _this18\n        });\n      });\n      ref.dropped.subscribe(function (event) {\n        _this18.dropped.emit({\n          previousIndex: event.previousIndex,\n          currentIndex: event.currentIndex,\n          previousContainer: event.previousContainer.data,\n          container: event.container.data,\n          isPointerOverContainer: event.isPointerOverContainer,\n          item: _this18\n        });\n      });\n    }\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this._disabled || this.dropContainer && this.dropContainer.disabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._disabled = coerceBooleanProperty(value);\n      this._dragRef.disabled = this._disabled;\n    }\n  }]);\n\n  return CdkDrag;\n}();\n\nCdkDrag.ɵfac = function CdkDrag_Factory(t) {\n  return new (t || CdkDrag)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CDK_DROP_LIST, 12), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(DragDropRegistry), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_CONFIG), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(DragDrop), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n};\n\nCdkDrag.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkDrag,\n  selectors: [[\"\", \"cdkDrag\", \"\"]],\n  contentQueries: function CdkDrag_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkDragPreview, true);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkDragPlaceholder, true);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkDragHandle, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._previewTemplate = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._placeholderTemplate = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._handles = _t);\n    }\n  },\n  hostAttrs: [1, \"cdk-drag\"],\n  hostVars: 4,\n  hostBindings: function CdkDrag_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"cdk-drag-disabled\", ctx.disabled)(\"cdk-drag-dragging\", ctx._dragRef.isDragging());\n    }\n  },\n  inputs: {\n    disabled: [\"cdkDragDisabled\", \"disabled\"],\n    data: [\"cdkDragData\", \"data\"],\n    lockAxis: [\"cdkDragLockAxis\", \"lockAxis\"],\n    rootElementSelector: [\"cdkDragRootElement\", \"rootElementSelector\"],\n    boundaryElementSelector: [\"cdkDragBoundary\", \"boundaryElementSelector\"]\n  },\n  outputs: {\n    started: \"cdkDragStarted\",\n    released: \"cdkDragReleased\",\n    ended: \"cdkDragEnded\",\n    entered: \"cdkDragEntered\",\n    exited: \"cdkDragExited\",\n    dropped: \"cdkDragDropped\",\n    moved: \"cdkDragMoved\"\n  },\n  exportAs: [\"cdkDrag\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CDK_DRAG_PARENT,\n    useExisting: CdkDrag\n  }]), ɵngcc0.ɵɵNgOnChangesFeature]\n});\n/** @nocollapse */\n\nCdkDrag.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [CDK_DROP_LIST]\n    }, {\n      type: Optional\n    }, {\n      type: SkipSelf\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: NgZone\n  }, {\n    type: ViewContainerRef\n  }, {\n    type: ViewportRuler\n  }, {\n    type: DragDropRegistry\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [CDK_DRAG_CONFIG]\n    }]\n  }, {\n    type: Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: DragDrop\n  }, {\n    type: ChangeDetectorRef\n  }];\n};\n\nCdkDrag.propDecorators = {\n  _handles: [{\n    type: ContentChildren,\n    args: [CdkDragHandle, {\n      descendants: true\n    }]\n  }],\n  _previewTemplate: [{\n    type: ContentChild,\n    args: [CdkDragPreview]\n  }],\n  _placeholderTemplate: [{\n    type: ContentChild,\n    args: [CdkDragPlaceholder]\n  }],\n  data: [{\n    type: Input,\n    args: ['cdkDragData']\n  }],\n  lockAxis: [{\n    type: Input,\n    args: ['cdkDragLockAxis']\n  }],\n  rootElementSelector: [{\n    type: Input,\n    args: ['cdkDragRootElement']\n  }],\n  boundaryElementSelector: [{\n    type: Input,\n    args: ['cdkDragBoundary']\n  }],\n  disabled: [{\n    type: Input,\n    args: ['cdkDragDisabled']\n  }],\n  started: [{\n    type: Output,\n    args: ['cdkDragStarted']\n  }],\n  released: [{\n    type: Output,\n    args: ['cdkDragReleased']\n  }],\n  ended: [{\n    type: Output,\n    args: ['cdkDragEnded']\n  }],\n  entered: [{\n    type: Output,\n    args: ['cdkDragEntered']\n  }],\n  exited: [{\n    type: Output,\n    args: ['cdkDragExited']\n  }],\n  dropped: [{\n    type: Output,\n    args: ['cdkDragDropped']\n  }],\n  moved: [{\n    type: Output,\n    args: ['cdkDragMoved']\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CdkDrag, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkDrag]',\n      exportAs: 'cdkDrag',\n      host: {\n        'class': 'cdk-drag',\n        '[class.cdk-drag-disabled]': 'disabled',\n        '[class.cdk-drag-dragging]': '_dragRef.isDragging()'\n      },\n      providers: [{\n        provide: CDK_DRAG_PARENT,\n        useExisting: CdkDrag\n      }]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CDK_DROP_LIST]\n      }, {\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: ɵngcc1.ViewportRuler\n    }, {\n      type: DragDropRegistry\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CDK_DRAG_CONFIG]\n      }]\n    }, {\n      type: ɵngcc2.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: DragDrop\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }];\n  }, {\n    started: [{\n      type: Output,\n      args: ['cdkDragStarted']\n    }],\n    released: [{\n      type: Output,\n      args: ['cdkDragReleased']\n    }],\n    ended: [{\n      type: Output,\n      args: ['cdkDragEnded']\n    }],\n    entered: [{\n      type: Output,\n      args: ['cdkDragEntered']\n    }],\n    exited: [{\n      type: Output,\n      args: ['cdkDragExited']\n    }],\n    dropped: [{\n      type: Output,\n      args: ['cdkDragDropped']\n    }],\n    moved: [{\n      type: Output,\n      args: ['cdkDragMoved']\n    }],\n    disabled: [{\n      type: Input,\n      args: ['cdkDragDisabled']\n    }],\n    _handles: [{\n      type: ContentChildren,\n      args: [CdkDragHandle, {\n        descendants: true\n      }]\n    }],\n    _previewTemplate: [{\n      type: ContentChild,\n      args: [CdkDragPreview]\n    }],\n    _placeholderTemplate: [{\n      type: ContentChild,\n      args: [CdkDragPlaceholder]\n    }],\n    data: [{\n      type: Input,\n      args: ['cdkDragData']\n    }],\n    lockAxis: [{\n      type: Input,\n      args: ['cdkDragLockAxis']\n    }],\n    rootElementSelector: [{\n      type: Input,\n      args: ['cdkDragRootElement']\n    }],\n    boundaryElementSelector: [{\n      type: Input,\n      args: ['cdkDragBoundary']\n    }]\n  });\n})();\n/**\n * Gets the closest ancestor of an element that matches a selector.\n * @param {?} element\n * @param {?} selector\n * @return {?}\n */\n\n\nfunction getClosestMatchingAncestor(element, selector) {\n  /** @type {?} */\n  var currentElement =\n  /** @type {?} */\n  element.parentElement;\n\n  while (currentElement) {\n    // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\n    if (currentElement.matches ? currentElement.matches(selector) :\n    /** @type {?} */\n    currentElement.msMatchesSelector(selector)) {\n      return currentElement;\n    }\n\n    currentElement = currentElement.parentElement;\n  }\n\n  return null;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n * @template T\n */\n\n\nvar CdkDropListGroup = /*#__PURE__*/function () {\n  function CdkDropListGroup() {\n    _classCallCheck(this, CdkDropListGroup);\n\n    /**\n     * Drop lists registered inside the group.\n     */\n    this._items = new Set();\n    this._disabled = false;\n  }\n  /**\n   * Whether starting a dragging sequence from inside this group is disabled.\n   * @return {?}\n   */\n\n\n  _createClass(CdkDropListGroup, [{\n    key: \"ngOnDestroy\",\n\n    /**\n     * @return {?}\n     */\n    value: function ngOnDestroy() {\n      this._items.clear();\n    }\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this._disabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._disabled = coerceBooleanProperty(value);\n    }\n  }]);\n\n  return CdkDropListGroup;\n}();\n\nCdkDropListGroup.ɵfac = function CdkDropListGroup_Factory(t) {\n  return new (t || CdkDropListGroup)();\n};\n\nCdkDropListGroup.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkDropListGroup,\n  selectors: [[\"\", \"cdkDropListGroup\", \"\"]],\n  inputs: {\n    disabled: [\"cdkDropListGroupDisabled\", \"disabled\"]\n  },\n  exportAs: [\"cdkDropListGroup\"]\n});\nCdkDropListGroup.propDecorators = {\n  disabled: [{\n    type: Input,\n    args: ['cdkDropListGroupDisabled']\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CdkDropListGroup, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkDropListGroup]',\n      exportAs: 'cdkDropListGroup'\n    }]\n  }], function () {\n    return [];\n  }, {\n    disabled: [{\n      type: Input,\n      args: ['cdkDropListGroupDisabled']\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Counter used to generate unique ids for drop zones.\n * @type {?}\n */\n\n\nvar _uniqueIdCounter$1 = 0;\nvar ɵ0 = undefined; // @breaking-change 8.0.0 `CdkDropList` implements `CdkDropListContainer` for backwards\n// compatiblity. The implements clause, as well as all the methods that it enforces can\n// be removed when `CdkDropListContainer` is deleted.\n\n/**\n * Container that wraps a set of draggable items.\n * @template T\n */\n\nvar CdkDropList = /*#__PURE__*/function () {\n  /**\n   * @param {?} element\n   * @param {?} dragDropRegistry\n   * @param {?} _changeDetectorRef\n   * @param {?=} _dir\n   * @param {?=} _group\n   * @param {?=} _document\n   * @param {?=} dragDrop\n   */\n  function CdkDropList(element, dragDropRegistry, _changeDetectorRef, _dir, _group, _document,\n  /**\n   * @deprecated `dragDropRegistry` and `_document` parameters to be removed.\n   * Also `dragDrop` parameter to be made required.\n   * @breaking-change 8.0.0.\n   */\n  dragDrop) {\n    var _this19 = this;\n\n    _classCallCheck(this, CdkDropList);\n\n    this.element = element;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._dir = _dir;\n    this._group = _group;\n    /**\n     * Emits when the list has been destroyed.\n     */\n\n    this._destroyed = new Subject();\n    /**\n     * Other draggable containers that this container is connected to and into which the\n     * container's items can be transferred. Can either be references to other drop containers,\n     * or their unique IDs.\n     */\n\n    this.connectedTo = [];\n    /**\n     * Direction in which the list is oriented.\n     */\n\n    this.orientation = 'vertical';\n    /**\n     * Unique ID for the drop zone. Can be used as a reference\n     * in the `connectedTo` of another `CdkDropList`.\n     */\n\n    this.id = \"cdk-drop-list-\".concat(_uniqueIdCounter$1++);\n    this._disabled = false;\n    /**\n     * Function that is used to determine whether an item\n     * is allowed to be moved into a drop container.\n     */\n\n    this.enterPredicate = function () {\n      return true;\n    };\n    /**\n     * Emits when the user drops an item inside the container.\n     */\n\n\n    this.dropped = new EventEmitter();\n    /**\n     * Emits when the user has moved a new drag item into this container.\n     */\n\n    this.entered = new EventEmitter();\n    /**\n     * Emits when the user removes an item from the container\n     * by dragging it into another container.\n     */\n\n    this.exited = new EventEmitter();\n    /**\n     * Emits as the user is swapping items while actively dragging.\n     */\n\n    this.sorted = new EventEmitter(); // @breaking-change 8.0.0 Remove null check once `dragDrop` parameter is made required.\n\n    if (dragDrop) {\n      this._dropListRef = dragDrop.createDropList(element);\n    } else {\n      this._dropListRef = new DropListRef(element, dragDropRegistry, _document || document);\n    }\n\n    this._dropListRef.data = this;\n\n    this._dropListRef.enterPredicate = function (drag, drop) {\n      return _this19.enterPredicate(drag.data, drop.data);\n    };\n\n    this._syncInputs(this._dropListRef);\n\n    this._handleEvents(this._dropListRef);\n\n    CdkDropList._dropLists.push(this);\n\n    if (_group) {\n      _group._items.add(this);\n    }\n  }\n  /**\n   * Whether starting a dragging sequence from this container is disabled.\n   * @return {?}\n   */\n\n\n  _createClass(CdkDropList, [{\n    key: \"ngAfterContentInit\",\n\n    /**\n     * @return {?}\n     */\n    value: function ngAfterContentInit() {\n      var _this20 = this;\n\n      this._draggables.changes.pipe(startWith(this._draggables), takeUntil(this._destroyed)).subscribe(function (items) {\n        _this20._dropListRef.withItems(items.map(function (drag) {\n          return drag._dragRef;\n        }));\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      /** @type {?} */\n      var index = CdkDropList._dropLists.indexOf(this);\n\n      if (index > -1) {\n        CdkDropList._dropLists.splice(index, 1);\n      }\n\n      if (this._group) {\n        this._group._items.delete(this);\n      }\n\n      this._dropListRef.dispose();\n\n      this._destroyed.next();\n\n      this._destroyed.complete();\n    }\n    /**\n     * Starts dragging an item.\n     * @return {?}\n     */\n\n  }, {\n    key: \"start\",\n    value: function start() {\n      this._dropListRef.start();\n    }\n    /**\n     * Drops an item into this container.\n     * @param {?} item Item being dropped into the container.\n     * @param {?} currentIndex Index at which the item should be inserted.\n     * @param {?} previousContainer Container from which the item got dragged in.\n     * @param {?} isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @return {?}\n     */\n\n  }, {\n    key: \"drop\",\n    value: function drop(item, currentIndex, previousContainer, isPointerOverContainer) {\n      this._dropListRef.drop(item._dragRef, currentIndex,\n      /** @type {?} */\n      previousContainer._dropListRef, isPointerOverContainer);\n    }\n    /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @param {?} item Item that was moved into the container.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @return {?}\n     */\n\n  }, {\n    key: \"enter\",\n    value: function enter(item, pointerX, pointerY) {\n      this._dropListRef.enter(item._dragRef, pointerX, pointerY);\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param {?} item Item that was dragged out.\n     * @return {?}\n     */\n\n  }, {\n    key: \"exit\",\n    value: function exit(item) {\n      this._dropListRef.exit(item._dragRef);\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @param {?} item Item whose index should be determined.\n     * @return {?}\n     */\n\n  }, {\n    key: \"getItemIndex\",\n    value: function getItemIndex(item) {\n      return this._dropListRef.getItemIndex(item._dragRef);\n    }\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param {?} item Item to be sorted.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @param {?} pointerDelta Direction in which the pointer is moving along each axis.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_sortItem\",\n    value: function _sortItem(item, pointerX, pointerY, pointerDelta) {\n      return this._dropListRef._sortItem(item._dragRef, pointerX, pointerY, pointerDelta);\n    }\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param {?} item Drag item that is being moved.\n     * @param {?} x Position of the item along the X axis.\n     * @param {?} y Position of the item along the Y axis.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getSiblingContainerFromPosition\",\n    value: function _getSiblingContainerFromPosition(item, x, y) {\n      /** @type {?} */\n      var result = this._dropListRef._getSiblingContainerFromPosition(item._dragRef, x, y);\n\n      return result ? result.data : null;\n    }\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param {?} x Pointer position along the X axis.\n     * @param {?} y Pointer position along the Y axis.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isOverContainer\",\n    value: function _isOverContainer(x, y) {\n      return this._dropListRef._isOverContainer(x, y);\n    }\n    /**\n     * Syncs the inputs of the CdkDropList with the options of the underlying DropListRef.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n\n  }, {\n    key: \"_syncInputs\",\n    value: function _syncInputs(ref) {\n      var _this21 = this;\n\n      if (this._dir) {\n        this._dir.change.pipe(startWith(this._dir.value), takeUntil(this._destroyed)).subscribe(function (value) {\n          return ref.withDirection(value);\n        });\n      }\n\n      ref.beforeStarted.subscribe(function () {\n        /** @type {?} */\n        var siblings = coerceArray(_this21.connectedTo).map(function (drop) {\n          return typeof drop === 'string' ?\n          /** @type {?} */\n          CdkDropList._dropLists.find(function (list) {\n            return list.id === drop;\n          }) : drop;\n        });\n\n        if (_this21._group) {\n          _this21._group._items.forEach(function (drop) {\n            if (siblings.indexOf(drop) === -1) {\n              siblings.push(drop);\n            }\n          });\n        }\n\n        ref.lockAxis = _this21.lockAxis;\n        ref.connectedTo(siblings.filter(function (drop) {\n          return drop && drop !== _this21;\n        }).map(function (list) {\n          return list._dropListRef;\n        })).withOrientation(_this21.orientation);\n      });\n    }\n    /**\n     * Handles events from the underlying DropListRef.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n\n  }, {\n    key: \"_handleEvents\",\n    value: function _handleEvents(ref) {\n      var _this22 = this;\n\n      ref.beforeStarted.subscribe(function () {\n        _this22._changeDetectorRef.markForCheck();\n      });\n      ref.entered.subscribe(function (event) {\n        _this22.entered.emit({\n          container: _this22,\n          item: event.item.data\n        });\n      });\n      ref.exited.subscribe(function (event) {\n        _this22.exited.emit({\n          container: _this22,\n          item: event.item.data\n        });\n      });\n      ref.sorted.subscribe(function (event) {\n        _this22.sorted.emit({\n          previousIndex: event.previousIndex,\n          currentIndex: event.currentIndex,\n          container: _this22,\n          item: event.item.data\n        });\n      });\n      ref.dropped.subscribe(function (event) {\n        _this22.dropped.emit({\n          previousIndex: event.previousIndex,\n          currentIndex: event.currentIndex,\n          previousContainer: event.previousContainer.data,\n          container: event.container.data,\n          item: event.item.data,\n          isPointerOverContainer: event.isPointerOverContainer\n        }); // Mark for check since all of these events run outside of change\n        // detection and we're not guaranteed for something else to have triggered it.\n\n\n        _this22._changeDetectorRef.markForCheck();\n      });\n    }\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this._disabled || !!this._group && this._group.disabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._disabled = coerceBooleanProperty(value);\n    }\n  }]);\n\n  return CdkDropList;\n}();\n\nCdkDropList.ɵfac = function CdkDropList_Factory(t) {\n  return new (t || CdkDropList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DragDropRegistry), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(CdkDropListGroup, 12), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(DragDrop));\n};\n\nCdkDropList.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkDropList,\n  selectors: [[\"\", \"cdkDropList\", \"\"], [\"cdk-drop-list\"]],\n  contentQueries: function CdkDropList_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkDrag, false);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._draggables = _t);\n    }\n  },\n  hostAttrs: [1, \"cdk-drop-list\"],\n  hostVars: 7,\n  hostBindings: function CdkDropList_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n      ɵngcc0.ɵɵclassProp(\"cdk-drop-list-disabled\", ctx.disabled)(\"cdk-drop-list-dragging\", ctx._dropListRef.isDragging())(\"cdk-drop-list-receiving\", ctx._dropListRef.isReceiving());\n    }\n  },\n  inputs: {\n    connectedTo: [\"cdkDropListConnectedTo\", \"connectedTo\"],\n    orientation: [\"cdkDropListOrientation\", \"orientation\"],\n    id: \"id\",\n    enterPredicate: [\"cdkDropListEnterPredicate\", \"enterPredicate\"],\n    disabled: [\"cdkDropListDisabled\", \"disabled\"],\n    data: [\"cdkDropListData\", \"data\"],\n    lockAxis: [\"cdkDropListLockAxis\", \"lockAxis\"]\n  },\n  outputs: {\n    dropped: \"cdkDropListDropped\",\n    entered: \"cdkDropListEntered\",\n    exited: \"cdkDropListExited\",\n    sorted: \"cdkDropListSorted\"\n  },\n  exportAs: [\"cdkDropList\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([// Prevent child drop lists from picking up the same group as their parent.\n  {\n    provide: CdkDropListGroup,\n    useValue: ɵ0\n  }, {\n    provide: CDK_DROP_LIST_CONTAINER,\n    useExisting: CdkDropList\n  }])]\n});\n/**\n * Keeps track of the drop lists that are currently on the page.\n */\n\nCdkDropList._dropLists = [];\n/** @nocollapse */\n\nCdkDropList.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: DragDropRegistry\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: CdkDropListGroup,\n    decorators: [{\n      type: Optional\n    }, {\n      type: SkipSelf\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: DragDrop\n  }];\n};\n\nCdkDropList.propDecorators = {\n  _draggables: [{\n    type: ContentChildren,\n    args: [forwardRef(function () {\n      return CdkDrag;\n    }), {\n      // Explicitly set to false since some of the logic below makes assumptions about it.\n      // The `.withItems` call below should be updated if we ever need to switch this to `true`.\n      descendants: false\n    }]\n  }],\n  connectedTo: [{\n    type: Input,\n    args: ['cdkDropListConnectedTo']\n  }],\n  data: [{\n    type: Input,\n    args: ['cdkDropListData']\n  }],\n  orientation: [{\n    type: Input,\n    args: ['cdkDropListOrientation']\n  }],\n  id: [{\n    type: Input\n  }],\n  lockAxis: [{\n    type: Input,\n    args: ['cdkDropListLockAxis']\n  }],\n  disabled: [{\n    type: Input,\n    args: ['cdkDropListDisabled']\n  }],\n  enterPredicate: [{\n    type: Input,\n    args: ['cdkDropListEnterPredicate']\n  }],\n  dropped: [{\n    type: Output,\n    args: ['cdkDropListDropped']\n  }],\n  entered: [{\n    type: Output,\n    args: ['cdkDropListEntered']\n  }],\n  exited: [{\n    type: Output,\n    args: ['cdkDropListExited']\n  }],\n  sorted: [{\n    type: Output,\n    args: ['cdkDropListSorted']\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CdkDropList, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkDropList], cdk-drop-list',\n      exportAs: 'cdkDropList',\n      providers: [// Prevent child drop lists from picking up the same group as their parent.\n      {\n        provide: CdkDropListGroup,\n        useValue: ɵ0\n      }, {\n        provide: CDK_DROP_LIST_CONTAINER,\n        useExisting: CdkDropList\n      }],\n      host: {\n        'class': 'cdk-drop-list',\n        '[id]': 'id',\n        '[class.cdk-drop-list-disabled]': 'disabled',\n        '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n        '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: DragDropRegistry\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc2.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: CdkDropListGroup,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: DragDrop\n    }];\n  }, {\n    connectedTo: [{\n      type: Input,\n      args: ['cdkDropListConnectedTo']\n    }],\n    orientation: [{\n      type: Input,\n      args: ['cdkDropListOrientation']\n    }],\n    id: [{\n      type: Input\n    }],\n    enterPredicate: [{\n      type: Input,\n      args: ['cdkDropListEnterPredicate']\n    }],\n    dropped: [{\n      type: Output,\n      args: ['cdkDropListDropped']\n    }],\n    entered: [{\n      type: Output,\n      args: ['cdkDropListEntered']\n    }],\n    exited: [{\n      type: Output,\n      args: ['cdkDropListExited']\n    }],\n    sorted: [{\n      type: Output,\n      args: ['cdkDropListSorted']\n    }],\n    disabled: [{\n      type: Input,\n      args: ['cdkDropListDisabled']\n    }],\n    _draggables: [{\n      type: ContentChildren,\n      args: [forwardRef(function () {\n        return CdkDrag;\n      }), {\n        // Explicitly set to false since some of the logic below makes assumptions about it.\n        // The `.withItems` call below should be updated if we ever need to switch this to `true`.\n        descendants: false\n      }]\n    }],\n    data: [{\n      type: Input,\n      args: ['cdkDropListData']\n    }],\n    lockAxis: [{\n      type: Input,\n      args: ['cdkDropListLockAxis']\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar DragDropModule = function DragDropModule() {\n  _classCallCheck(this, DragDropModule);\n};\n\nDragDropModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: DragDropModule\n});\nDragDropModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function DragDropModule_Factory(t) {\n    return new (t || DragDropModule)();\n  },\n  providers: [DragDrop]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DragDropModule, {\n    declarations: [CdkDropList, CdkDropListGroup, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder],\n    exports: [CdkDropList, CdkDropListGroup, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(DragDropModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [CdkDropList, CdkDropListGroup, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder],\n      exports: [CdkDropList, CdkDropListGroup, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder],\n      providers: [DragDrop]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { DragDrop, DragRef, DropListRef, CdkDropList, CDK_DROP_LIST, CDK_DROP_LIST_CONTAINER, moveItemInArray, transferArrayItem, copyArrayItem, DragDropModule, DragDropRegistry, CdkDropListGroup, CDK_DRAG_CONFIG_FACTORY, CDK_DRAG_CONFIG, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder, CDK_DRAG_PARENT as ɵb };","map":{"version":3,"sources":["../../../src/cdk/drag-drop/drag-styling.ts","../../../src/cdk/drag-drop/transition-duration.ts","../../../src/cdk/drag-drop/drag-ref.ts","../../../src/cdk/drag-drop/drag-utils.ts","../../../src/cdk/drag-drop/drop-list-ref.ts","../../../src/cdk/drag-drop/drag-drop-registry.ts","../../../src/cdk/drag-drop/drag-drop.ts","../../../src/cdk/drag-drop/drop-list-container.ts","../../../src/cdk/drag-drop/drag-parent.ts","../../../src/cdk/drag-drop/directives/drag-handle.ts","../../../src/cdk/drag-drop/directives/drag-placeholder.ts","../../../src/cdk/drag-drop/directives/drag-preview.ts","../../../src/cdk/drag-drop/directives/drag.ts","../../../src/cdk/drag-drop/directives/drop-list-group.ts","../../../src/cdk/drag-drop/directives/drop-list.ts","../../../src/cdk/drag-drop/drag-drop-module.ts"],"names":["clamp","_uniqueIdCounter"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n// Helper type that ignores `readonly` properties. This is used in\n// `extendStyles` to ignore the readonly properties on CSSStyleDeclaration\n// since we won't be touching those anyway.\ntype Writeable<T> = { -readonly [P in keyof T]-?: T[P] };\n\n/**\n * Extended CSSStyleDeclaration that includes a couple of drag-related\n * properties that aren't in the built-in TS typings.\n */\ninterface DragCSSStyleDeclaration extends CSSStyleDeclaration {\n  webkitUserDrag: string;\n  MozUserSelect: string; // For some reason the Firefox property is in PascalCase.\n}\n\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * @docs-private\n */\nexport function extendStyles(\n    dest: Writeable<CSSStyleDeclaration>,\n    source: Partial<DragCSSStyleDeclaration>) {\n  for (let key in source) {\n    if (source.hasOwnProperty(key)) {\n      dest[key as keyof CSSStyleDeclaration] = source[key as keyof CSSStyleDeclaration];\n    }\n  }\n\n  return dest;\n}\n\n\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nexport function toggleNativeDragInteractions(element: HTMLElement, enable: boolean) {\n  const userSelect = enable ? '' : 'none';\n\n  extendStyles(element.style, {\n    touchAction: enable ? '' : 'none',\n    webkitUserDrag: enable ? '' : 'none',\n    webkitTapHighlightColor: enable ? '' : 'transparent',\n    userSelect: userSelect,\n    msUserSelect: userSelect,\n    webkitUserSelect: userSelect,\n    MozUserSelect: userSelect\n  });\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value: string): number {\n  // Some browsers will return it in seconds, whereas others will return milliseconds.\n  const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n  return parseFloat(value) * multiplier;\n}\n\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nexport function getTransformTransitionDurationInMs(element: HTMLElement): number {\n  const computedStyle = getComputedStyle(element);\n  const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n  const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n\n  // If there's no transition for `all` or `transform`, we shouldn't do anything.\n  if (!property) {\n    return 0;\n  }\n\n  // Get the index of the property that we're interested in and match\n  // it up to the same index in `transition-delay` and `transition-duration`.\n  const propertyIndex = transitionedProperties.indexOf(property);\n  const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n  const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n\n  return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n         parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\n}\n\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle: CSSStyleDeclaration, name: string): string[] {\n  const value = computedStyle.getPropertyValue(name);\n  return value.split(',').map(part => part.trim());\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EmbeddedViewRef, ElementRef, NgZone, ViewContainerRef, TemplateRef} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {Direction} from '@angular/cdk/bidi';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {coerceBooleanProperty, coerceElement} from '@angular/cdk/coercion';\nimport {Subscription, Subject, Observable, Observer} from 'rxjs';\nimport {DropListRefInternal as DropListRef} from './drop-list-ref';\nimport {DragDropRegistry} from './drag-drop-registry';\nimport {extendStyles, toggleNativeDragInteractions} from './drag-styling';\nimport {getTransformTransitionDurationInMs} from './transition-duration';\n\n/** Object that can be used to configure the behavior of DragRef. */\nexport interface DragRefConfig {\n  /**\n   * Minimum amount of pixels that the user should\n   * drag, before the CDK initiates a drag sequence.\n   */\n  dragStartThreshold: number;\n\n  /**\n   * Amount the pixels the user should drag before the CDK\n   * considers them to have changed the drag direction.\n   */\n  pointerDirectionChangeThreshold: number;\n}\n\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({passive: false});\n\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n\n// TODO(crisbeto): add auto-scrolling functionality.\n// TODO(crisbeto): add an API for moving a draggable up/down the\n// list programmatically. Useful for keyboard controls.\n\n/**\n * Internal compile-time-only representation of a `DragRef`.\n * Used to avoid circular import issues between the `DragRef` and the `DropListRef`.\n * @docs-private\n */\nexport interface DragRefInternal extends DragRef {}\n\n/** Template that can be used to create a drag helper element (e.g. a preview or a placeholder). */\ninterface DragHelperTemplate<T = any> {\n  template: TemplateRef<T> | null;\n  viewContainer: ViewContainerRef;\n  context: T;\n}\n\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n * @docs-private\n */\nexport class DragRef<T = any> {\n  /** Element displayed next to the user's pointer while the element is dragged. */\n  private _preview: HTMLElement;\n\n  /** Reference to the view of the preview element. */\n  private _previewRef: EmbeddedViewRef<any> | null;\n\n  /** Reference to the view of the placeholder element. */\n  private _placeholderRef: EmbeddedViewRef<any> | null;\n\n  /** Element that is rendered instead of the draggable item while it is being sorted. */\n  private _placeholder: HTMLElement;\n\n  /** Coordinates within the element at which the user picked up the element. */\n  private _pickupPositionInElement: Point;\n\n  /** Coordinates on the page at which the user picked up the element. */\n  private _pickupPositionOnPage: Point;\n\n  /**\n   * Reference to the element that comes after the draggable in the DOM, at the time\n   * it was picked up. Used for restoring its initial position when it's dropped.\n   */\n  private _nextSibling: Node | null;\n\n  /**\n   * CSS `transform` applied to the element when it isn't being dragged. We need a\n   * passive transform in order for the dragged element to retain its new position\n   * after the user has stopped dragging and because we need to know the relative\n   * position in case they start dragging again. This corresponds to `element.style.transform`.\n   */\n  private _passiveTransform: Point = {x: 0, y: 0};\n\n  /** CSS `transform` that is applied to the element while it's being dragged. */\n  private _activeTransform: Point = {x: 0, y: 0};\n\n  /** Inline `transform` value that the element had before the first dragging sequence. */\n  private _initialTransform?: string;\n\n  /**\n   * Whether the dragging sequence has been started. Doesn't\n   * necessarily mean that the element has been moved.\n   */\n  private _hasStartedDragging: boolean;\n\n  /** Whether the element has moved since the user started dragging it. */\n  private _hasMoved: boolean;\n\n  /** Drop container in which the DragRef resided when dragging began. */\n  private _initialContainer: DropListRef;\n\n  /** Cached scroll position on the page when the element was picked up. */\n  private _scrollPosition: {top: number, left: number};\n\n  /** Emits when the item is being moved. */\n  private _moveEvents = new Subject<{\n    source: DragRef;\n    pointerPosition: {x: number, y: number};\n    event: MouseEvent | TouchEvent;\n    delta: {x: -1 | 0 | 1, y: -1 | 0 | 1};\n  }>();\n\n  /**\n   * Amount of subscriptions to the move event. Used to avoid\n   * hitting the zone if the consumer didn't subscribe to it.\n   */\n  private _moveEventSubscriptions = 0;\n\n  /** Keeps track of the direction in which the user is dragging along each axis. */\n  private _pointerDirectionDelta: {x: -1 | 0 | 1, y: -1 | 0 | 1};\n\n  /** Pointer position at which the last change in the delta occurred. */\n  private _pointerPositionAtLastDirectionChange: Point;\n\n  /**\n   * Root DOM node of the drag instance. This is the element that will\n   * be moved around as the user is dragging.\n   */\n  private _rootElement: HTMLElement;\n\n  /**\n   * Inline style value of `-webkit-tap-highlight-color` at the time the\n   * dragging was started. Used to restore the value once we're done dragging.\n   */\n  private _rootElementTapHighlight: string | null;\n\n  /** Subscription to pointer movement events. */\n  private _pointerMoveSubscription = Subscription.EMPTY;\n\n  /** Subscription to the event that is dispatched when the user lifts their pointer. */\n  private _pointerUpSubscription = Subscription.EMPTY;\n\n  /**\n   * Time at which the last touch event occurred. Used to avoid firing the same\n   * events multiple times on touch devices where the browser will fire a fake\n   * mouse event for each touch event, after a certain time.\n   */\n  private _lastTouchEventTime: number;\n\n  /** Cached reference to the boundary element. */\n  private _boundaryElement: HTMLElement | null = null;\n\n  /** Whether the native dragging interactions have been enabled on the root element. */\n  private _nativeInteractionsEnabled = true;\n\n  /** Cached dimensions of the preview element. */\n  private _previewRect?: ClientRect;\n\n  /** Cached dimensions of the boundary element. */\n  private _boundaryRect?: ClientRect;\n\n  /** Element that will be used as a template to create the draggable item's preview. */\n  private _previewTemplate?: DragHelperTemplate | null;\n\n  /** Template for placeholder element rendered to show where a draggable would be dropped. */\n  private _placeholderTemplate?: DragHelperTemplate | null;\n\n  /** Elements that can be used to drag the draggable item. */\n  private _handles: HTMLElement[] = [];\n\n  /** Registered handles that are currently disabled. */\n  private _disabledHandles = new Set<HTMLElement>();\n\n  /** Droppable container that the draggable is a part of. */\n  private _dropContainer?: DropListRef;\n\n  /** Layout direction of the item. */\n  private _direction: Direction = 'ltr';\n\n  /** Axis along which dragging is locked. */\n  lockAxis: 'x' | 'y';\n\n  /** Whether starting to drag this element is disabled. */\n  get disabled(): boolean {\n    return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._toggleNativeDragInteractions();\n    }\n  }\n  private _disabled = false;\n\n  /** Emits as the drag sequence is being prepared. */\n  beforeStarted = new Subject<void>();\n\n  /** Emits when the user starts dragging the item. */\n  started = new Subject<{source: DragRef}>();\n\n  /** Emits when the user has released a drag item, before any animations have started. */\n  released = new Subject<{source: DragRef}>();\n\n  /** Emits when the user stops dragging an item in the container. */\n  ended = new Subject<{source: DragRef}>();\n\n  /** Emits when the user has moved the item into a new container. */\n  entered = new Subject<{container: DropListRef, item: DragRef}>();\n\n  /** Emits when the user removes the item its container by dragging it into another container. */\n  exited = new Subject<{container: DropListRef, item: DragRef}>();\n\n  /** Emits when the user drops the item inside a container. */\n  dropped = new Subject<{\n    previousIndex: number;\n    currentIndex: number;\n    item: DragRef;\n    container: DropListRef;\n    previousContainer: DropListRef;\n    isPointerOverContainer: boolean;\n  }>();\n\n  /**\n   * Emits as the user is dragging the item. Use with caution,\n   * because this event will fire for every pixel that the user has dragged.\n   */\n  moved: Observable<{\n    source: DragRef;\n    pointerPosition: {x: number, y: number};\n    event: MouseEvent | TouchEvent;\n    delta: {x: -1 | 0 | 1, y: -1 | 0 | 1};\n  }> = new Observable((observer: Observer<any>) => {\n    const subscription = this._moveEvents.subscribe(observer);\n    this._moveEventSubscriptions++;\n\n    return () => {\n      subscription.unsubscribe();\n      this._moveEventSubscriptions--;\n    };\n  });\n\n  /** Arbitrary data that can be attached to the drag item. */\n  data: T;\n\n  constructor(\n    element: ElementRef<HTMLElement> | HTMLElement,\n    private _config: DragRefConfig,\n    private _document: Document,\n    private _ngZone: NgZone,\n    private _viewportRuler: ViewportRuler,\n    private _dragDropRegistry: DragDropRegistry<DragRef, DropListRef>) {\n\n    this.withRootElement(element);\n    _dragDropRegistry.registerDragItem(this);\n  }\n\n  /**\n   * Returns the element that is being used as a placeholder\n   * while the current element is being dragged.\n   */\n  getPlaceholderElement(): HTMLElement {\n    return this._placeholder;\n  }\n\n  /** Returns the root draggable element. */\n  getRootElement(): HTMLElement {\n    return this._rootElement;\n  }\n\n  /** Registers the handles that can be used to drag the element. */\n  withHandles(handles: (HTMLElement | ElementRef<HTMLElement>)[]): this {\n    this._handles = handles.map(handle => coerceElement(handle));\n    this._handles.forEach(handle => toggleNativeDragInteractions(handle, false));\n    this._toggleNativeDragInteractions();\n    return this;\n  }\n\n  /**\n   * Registers the template that should be used for the drag preview.\n   * @param template Template that from which to stamp out the preview.\n   */\n  withPreviewTemplate(template: DragHelperTemplate | null): this {\n    this._previewTemplate = template;\n    return this;\n  }\n\n  /**\n   * Registers the template that should be used for the drag placeholder.\n   * @param template Template that from which to stamp out the placeholder.\n   */\n  withPlaceholderTemplate(template: DragHelperTemplate | null): this {\n    this._placeholderTemplate = template;\n    return this;\n  }\n\n  /**\n   * Sets an alternate drag root element. The root element is the element that will be moved as\n   * the user is dragging. Passing an alternate root element is useful when trying to enable\n   * dragging on an element that you might not have access to.\n   */\n  withRootElement(rootElement: ElementRef<HTMLElement> | HTMLElement): this {\n    const element = coerceElement(rootElement);\n\n    if (element !== this._rootElement) {\n      if (this._rootElement) {\n        this._removeRootElementListeners(this._rootElement);\n      }\n\n      element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n      element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n      this._initialTransform = undefined;\n      this._rootElement = element;\n    }\n\n    return this;\n  }\n\n  /**\n   * Element to which the draggable's position will be constrained.\n   */\n  withBoundaryElement(boundaryElement: ElementRef<HTMLElement> | HTMLElement | null): this {\n    this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n    return this;\n  }\n\n  /** Removes the dragging functionality from the DOM element. */\n  dispose() {\n    this._removeRootElementListeners(this._rootElement);\n\n    // Do this check before removing from the registry since it'll\n    // stop being considered as dragged once it is removed.\n    if (this.isDragging()) {\n      // Since we move out the element to the end of the body while it's being\n      // dragged, we have to make sure that it's removed if it gets destroyed.\n      removeElement(this._rootElement);\n    }\n\n    this._destroyPreview();\n    this._destroyPlaceholder();\n    this._dragDropRegistry.removeDragItem(this);\n    this._removeSubscriptions();\n    this.beforeStarted.complete();\n    this.started.complete();\n    this.released.complete();\n    this.ended.complete();\n    this.entered.complete();\n    this.exited.complete();\n    this.dropped.complete();\n    this._moveEvents.complete();\n    this._handles = [];\n    this._disabledHandles.clear();\n    this._dropContainer = undefined;\n    this._boundaryElement = this._rootElement = this._placeholderTemplate =\n        this._previewTemplate = this._nextSibling = null!;\n  }\n\n  /** Checks whether the element is currently being dragged. */\n  isDragging(): boolean {\n    return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n  }\n\n  /** Resets a standalone drag item to its initial position. */\n  reset(): void {\n    this._rootElement.style.transform = this._initialTransform || '';\n    this._activeTransform = {x: 0, y: 0};\n    this._passiveTransform = {x: 0, y: 0};\n  }\n\n  /**\n   * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n   * @param handle Handle element that should be disabled.\n   */\n  disableHandle(handle: HTMLElement) {\n    if (this._handles.indexOf(handle) > -1) {\n      this._disabledHandles.add(handle);\n    }\n  }\n\n  /**\n   * Enables a handle, if it has been disabled.\n   * @param handle Handle element to be enabled.\n   */\n  enableHandle(handle: HTMLElement) {\n    this._disabledHandles.delete(handle);\n  }\n\n  /** Sets the layout direction of the draggable item. */\n  withDirection(direction: Direction): this {\n    this._direction = direction;\n    return this;\n  }\n\n  /** Sets the container that the item is part of. */\n  _withDropContainer(container: DropListRef) {\n    this._dropContainer = container;\n  }\n\n  /** Unsubscribes from the global subscriptions. */\n  private _removeSubscriptions() {\n    this._pointerMoveSubscription.unsubscribe();\n    this._pointerUpSubscription.unsubscribe();\n  }\n\n  /** Destroys the preview element and its ViewRef. */\n  private _destroyPreview() {\n    if (this._preview) {\n      removeElement(this._preview);\n    }\n\n    if (this._previewRef) {\n      this._previewRef.destroy();\n    }\n\n    this._preview = this._previewRef = null!;\n  }\n\n  /** Destroys the placeholder element and its ViewRef. */\n  private _destroyPlaceholder() {\n    if (this._placeholder) {\n      removeElement(this._placeholder);\n    }\n\n    if (this._placeholderRef) {\n      this._placeholderRef.destroy();\n    }\n\n    this._placeholder = this._placeholderRef = null!;\n  }\n\n  /** Handler for the `mousedown`/`touchstart` events. */\n  private _pointerDown = (event: MouseEvent | TouchEvent) => {\n    this.beforeStarted.next();\n\n    // Delegate the event based on whether it started from a handle or the element itself.\n    if (this._handles.length) {\n      const targetHandle = this._handles.find(handle => {\n        const target = event.target;\n        return !!target && (target === handle || handle.contains(target as HTMLElement));\n      });\n\n      if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n        this._initializeDragSequence(targetHandle, event);\n      }\n    } else if (!this.disabled) {\n      this._initializeDragSequence(this._rootElement, event);\n    }\n  }\n\n  /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n  private _pointerMove = (event: MouseEvent | TouchEvent) => {\n    if (!this._hasStartedDragging) {\n      const pointerPosition = this._getPointerPositionOnPage(event);\n      const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n      const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n\n      // Only start dragging after the user has moved more than the minimum distance in either\n      // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\n      // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n      // per pixel of movement (e.g. if the user moves their pointer quickly).\n      if (distanceX + distanceY >= this._config.dragStartThreshold) {\n        this._hasStartedDragging = true;\n        this._ngZone.run(() => this._startDragSequence(event));\n      }\n\n      return;\n    }\n\n    // We only need the preview dimensions if we have a boundary element.\n    if (this._boundaryElement) {\n      // Cache the preview element rect if we haven't cached it already or if\n      // we cached it too early before the element dimensions were computed.\n      if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n        this._previewRect = (this._preview || this._rootElement).getBoundingClientRect();\n      }\n    }\n\n    const constrainedPointerPosition = this._getConstrainedPointerPosition(event);\n    this._hasMoved = true;\n    event.preventDefault();\n    this._updatePointerDirectionDelta(constrainedPointerPosition);\n\n    if (this._dropContainer) {\n      this._updateActiveDropContainer(constrainedPointerPosition);\n    } else {\n      const activeTransform = this._activeTransform;\n      activeTransform.x =\n          constrainedPointerPosition.x - this._pickupPositionOnPage.x + this._passiveTransform.x;\n      activeTransform.y =\n          constrainedPointerPosition.y - this._pickupPositionOnPage.y + this._passiveTransform.y;\n      const transform = getTransform(activeTransform.x, activeTransform.y);\n\n      // Preserve the previous `transform` value, if there was one. Note that we apply our own\n      // transform before the user's, because things like rotation can affect which direction\n      // the element will be translated towards.\n      this._rootElement.style.transform = this._initialTransform ?\n          transform + ' ' + this._initialTransform  : transform;\n\n      // Apply transform as attribute if dragging and svg element to work for IE\n      if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n        const appliedTransform = `translate(${activeTransform.x} ${activeTransform.y})`;\n        this._rootElement.setAttribute('transform', appliedTransform);\n      }\n    }\n\n    // Since this event gets fired for every pixel while dragging, we only\n    // want to fire it if the consumer opted into it. Also we have to\n    // re-enter the zone because we run all of the events on the outside.\n    if (this._moveEventSubscriptions > 0) {\n      this._ngZone.run(() => {\n        this._moveEvents.next({\n          source: this,\n          pointerPosition: constrainedPointerPosition,\n          event,\n          delta: this._pointerDirectionDelta\n        });\n      });\n    }\n  }\n\n  /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n  private _pointerUp = (event: MouseEvent | TouchEvent) => {\n    // Note that here we use `isDragging` from the service, rather than from `this`.\n    // The difference is that the one from the service reflects whether a dragging sequence\n    // has been initiated, whereas the one on `this` includes whether the user has passed\n    // the minimum dragging threshold.\n    if (!this._dragDropRegistry.isDragging(this)) {\n      return;\n    }\n\n    this._removeSubscriptions();\n    this._dragDropRegistry.stopDragging(this);\n\n    if (this._handles) {\n      this._rootElement.style.webkitTapHighlightColor = this._rootElementTapHighlight;\n    }\n\n    if (!this._hasStartedDragging) {\n      return;\n    }\n\n    this.released.next({source: this});\n\n    if (!this._dropContainer) {\n      // Convert the active transform into a passive one. This means that next time\n      // the user starts dragging the item, its position will be calculated relatively\n      // to the new passive transform.\n      this._passiveTransform.x = this._activeTransform.x;\n      this._passiveTransform.y = this._activeTransform.y;\n      this._ngZone.run(() => this.ended.next({source: this}));\n      this._dragDropRegistry.stopDragging(this);\n      return;\n    }\n\n    this._animatePreviewToPlaceholder().then(() => {\n      this._cleanupDragArtifacts(event);\n      this._dragDropRegistry.stopDragging(this);\n    });\n  }\n\n  /** Starts the dragging sequence. */\n  private _startDragSequence(event: MouseEvent | TouchEvent) {\n    // Emit the event on the item before the one on the container.\n    this.started.next({source: this});\n\n    if (isTouchEvent(event)) {\n      this._lastTouchEventTime = Date.now();\n    }\n\n    if (this._dropContainer) {\n      const element = this._rootElement;\n\n      // Grab the `nextSibling` before the preview and placeholder\n      // have been created so we don't get the preview by accident.\n      this._nextSibling = element.nextSibling;\n\n      const preview = this._preview = this._createPreviewElement();\n      const placeholder = this._placeholder = this._createPlaceholderElement();\n\n      // We move the element out at the end of the body and we make it hidden, because keeping it in\n      // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n      // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n      element.style.display = 'none';\n      this._document.body.appendChild(element.parentNode!.replaceChild(placeholder, element));\n      this._document.body.appendChild(preview);\n      this._dropContainer.start();\n    }\n  }\n\n  /**\n   * Sets up the different variables and subscriptions\n   * that will be necessary for the dragging sequence.\n   * @param referenceElement Element that started the drag sequence.\n   * @param event Browser event object that started the sequence.\n   */\n  private _initializeDragSequence(referenceElement: HTMLElement, event: MouseEvent | TouchEvent) {\n    // Always stop propagation for the event that initializes\n    // the dragging sequence, in order to prevent it from potentially\n    // starting another sequence for a draggable parent somewhere up the DOM tree.\n    event.stopPropagation();\n\n    const isDragging = this.isDragging();\n    const isTouchSequence = isTouchEvent(event);\n    const isAuxiliaryMouseButton = !isTouchSequence && (event as MouseEvent).button !== 0;\n    const rootElement = this._rootElement;\n    const isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime &&\n      this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n\n    // If the event started from an element with the native HTML drag&drop, it'll interfere\n    // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n    // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n    // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n    // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n    // events from firing on touch devices.\n    if (event.target && (event.target as HTMLElement).draggable && event.type === 'mousedown') {\n      event.preventDefault();\n    }\n\n    // Abort if the user is already dragging or is using a mouse button other than the primary one.\n    if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent) {\n      return;\n    }\n\n    // Cache the previous transform amount only after the first drag sequence, because\n    // we don't want our own transforms to stack on top of each other.\n    if (this._initialTransform == null) {\n      this._initialTransform = this._rootElement.style.transform || '';\n    }\n\n    // If we've got handles, we need to disable the tap highlight on the entire root element,\n    // otherwise iOS will still add it, even though all the drag interactions on the handle\n    // are disabled.\n    if (this._handles.length) {\n      this._rootElementTapHighlight = rootElement.style.webkitTapHighlightColor;\n      rootElement.style.webkitTapHighlightColor = 'transparent';\n    }\n\n    this._toggleNativeDragInteractions();\n    this._hasStartedDragging = this._hasMoved = false;\n    this._initialContainer = this._dropContainer!;\n    this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n    this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n    this._scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n    if (this._boundaryElement) {\n      this._boundaryRect = this._boundaryElement.getBoundingClientRect();\n    }\n\n    // If we have a custom preview template, the element won't be visible anyway so we avoid the\n    // extra `getBoundingClientRect` calls and just move the preview next to the cursor.\n    this._pickupPositionInElement = this._previewTemplate && this._previewTemplate.template ?\n      {x: 0, y: 0} :\n      this._getPointerPositionInElement(referenceElement, event);\n    const pointerPosition = this._pickupPositionOnPage = this._getPointerPositionOnPage(event);\n    this._pointerDirectionDelta = {x: 0, y: 0};\n    this._pointerPositionAtLastDirectionChange = {x: pointerPosition.x, y: pointerPosition.y};\n    this._dragDropRegistry.startDragging(this, event);\n  }\n\n  /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n  private _cleanupDragArtifacts(event: MouseEvent | TouchEvent) {\n    // Restore the element's visibility and insert it at its old position in the DOM.\n    // It's important that we maintain the position, because moving the element around in the DOM\n    // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n    // while moving the existing elements in all other cases.\n    this._rootElement.style.display = '';\n\n    if (this._nextSibling) {\n      this._nextSibling.parentNode!.insertBefore(this._rootElement, this._nextSibling);\n    } else {\n      this._initialContainer.element.appendChild(this._rootElement);\n    }\n\n    this._destroyPreview();\n    this._destroyPlaceholder();\n    this._boundaryRect = this._previewRect = undefined;\n\n    // Re-enter the NgZone since we bound `document` events on the outside.\n    this._ngZone.run(() => {\n      const container = this._dropContainer!;\n      const currentIndex = container.getItemIndex(this);\n      const {x, y} = this._getPointerPositionOnPage(event);\n      const isPointerOverContainer = container._isOverContainer(x, y);\n\n      this.ended.next({source: this});\n      this.dropped.next({\n        item: this,\n        currentIndex,\n        previousIndex: this._initialContainer.getItemIndex(this),\n        container: container,\n        previousContainer: this._initialContainer,\n        isPointerOverContainer\n      });\n      container.drop(this, currentIndex, this._initialContainer, isPointerOverContainer);\n      this._dropContainer = this._initialContainer;\n    });\n  }\n\n  /**\n   * Updates the item's position in its drop container, or moves it\n   * into a new one, depending on its current drag position.\n   */\n  private _updateActiveDropContainer({x, y}: Point) {\n    // Drop container that draggable has been moved into.\n    let newContainer = this._dropContainer!._getSiblingContainerFromPosition(this, x, y) ||\n        this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n\n    // If we couldn't find a new container to move the item into, and the item has left it's\n    // initial container, check whether the it's over the initial container. This handles the\n    // case where two containers are connected one way and the user tries to undo dragging an\n    // item into a new container.\n    if (!newContainer && this._dropContainer !== this._initialContainer &&\n        this._initialContainer._isOverContainer(x, y)) {\n      newContainer = this._initialContainer;\n    }\n\n    if (newContainer && newContainer !== this._dropContainer) {\n      this._ngZone.run(() => {\n        // Notify the old container that the item has left.\n        this.exited.next({item: this, container: this._dropContainer!});\n        this._dropContainer!.exit(this);\n        // Notify the new container that the item has entered.\n        this.entered.next({item: this, container: newContainer!});\n        this._dropContainer = newContainer!;\n        this._dropContainer.enter(this, x, y);\n      });\n    }\n\n    this._dropContainer!._sortItem(this, x, y, this._pointerDirectionDelta);\n    this._preview.style.transform =\n        getTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n  }\n\n  /**\n   * Creates the element that will be rendered next to the user's pointer\n   * and will be used as a preview of the element that is being dragged.\n   */\n  private _createPreviewElement(): HTMLElement {\n    const previewConfig = this._previewTemplate;\n    const previewTemplate = previewConfig ? previewConfig.template : null;\n    let preview: HTMLElement;\n\n    if (previewTemplate) {\n      const viewRef = previewConfig!.viewContainer.createEmbeddedView(previewTemplate,\n                                                                      previewConfig!.context);\n      preview = viewRef.rootNodes[0];\n      this._previewRef = viewRef;\n      preview.style.transform =\n          getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n    } else {\n      const element = this._rootElement;\n      const elementRect = element.getBoundingClientRect();\n\n      preview = deepCloneNode(element);\n      preview.style.width = `${elementRect.width}px`;\n      preview.style.height = `${elementRect.height}px`;\n      preview.style.transform = getTransform(elementRect.left, elementRect.top);\n    }\n\n    extendStyles(preview.style, {\n      // It's important that we disable the pointer events on the preview, because\n      // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n      pointerEvents: 'none',\n      position: 'fixed',\n      top: '0',\n      left: '0',\n      zIndex: '1000'\n    });\n\n    toggleNativeDragInteractions(preview, false);\n\n    preview.classList.add('cdk-drag-preview');\n    preview.setAttribute('dir', this._direction);\n\n    return preview;\n  }\n\n  /**\n   * Animates the preview element from its current position to the location of the drop placeholder.\n   * @returns Promise that resolves when the animation completes.\n   */\n  private _animatePreviewToPlaceholder(): Promise<void> {\n    // If the user hasn't moved yet, the transitionend event won't fire.\n    if (!this._hasMoved) {\n      return Promise.resolve();\n    }\n\n    const placeholderRect = this._placeholder.getBoundingClientRect();\n\n    // Apply the class that adds a transition to the preview.\n    this._preview.classList.add('cdk-drag-animating');\n\n    // Move the preview to the placeholder position.\n    this._preview.style.transform = getTransform(placeholderRect.left, placeholderRect.top);\n\n    // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n    // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n    // apply its style, we take advantage of the available info to figure out whether we need to\n    // bind the event in the first place.\n    const duration = getTransformTransitionDurationInMs(this._preview);\n\n    if (duration === 0) {\n      return Promise.resolve();\n    }\n\n    return this._ngZone.runOutsideAngular(() => {\n      return new Promise(resolve => {\n        const handler = ((event: TransitionEvent) => {\n          if (!event || (event.target === this._preview && event.propertyName === 'transform')) {\n            this._preview.removeEventListener('transitionend', handler);\n            resolve();\n            clearTimeout(timeout);\n          }\n        }) as EventListenerOrEventListenerObject;\n\n        // If a transition is short enough, the browser might not fire the `transitionend` event.\n        // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n        // fire if the transition hasn't completed when it was supposed to.\n        const timeout = setTimeout(handler as Function, duration * 1.5);\n        this._preview.addEventListener('transitionend', handler);\n      });\n    });\n  }\n\n  /** Creates an element that will be shown instead of the current element while dragging. */\n  private _createPlaceholderElement(): HTMLElement {\n    const placeholderConfig = this._placeholderTemplate;\n    const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n    let placeholder: HTMLElement;\n\n    if (placeholderTemplate) {\n      this._placeholderRef = placeholderConfig!.viewContainer.createEmbeddedView(\n        placeholderTemplate,\n        placeholderConfig!.context\n      );\n      placeholder = this._placeholderRef.rootNodes[0];\n    } else {\n      placeholder = deepCloneNode(this._rootElement);\n    }\n\n    placeholder.classList.add('cdk-drag-placeholder');\n    return placeholder;\n  }\n\n  /**\n   * Figures out the coordinates at which an element was picked up.\n   * @param referenceElement Element that initiated the dragging.\n   * @param event Event that initiated the dragging.\n   */\n  private _getPointerPositionInElement(referenceElement: HTMLElement,\n                                       event: MouseEvent | TouchEvent): Point {\n    const elementRect = this._rootElement.getBoundingClientRect();\n    const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n    const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n    const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n    const x = point.pageX - referenceRect.left - this._scrollPosition.left;\n    const y = point.pageY - referenceRect.top - this._scrollPosition.top;\n\n    return {\n      x: referenceRect.left - elementRect.left + x,\n      y: referenceRect.top - elementRect.top + y\n    };\n  }\n\n  /** Determines the point of the page that was touched by the user. */\n  private _getPointerPositionOnPage(event: MouseEvent | TouchEvent): Point {\n    // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n    const point = isTouchEvent(event) ? (event.touches[0] || event.changedTouches[0]) : event;\n\n    return {\n      x: point.pageX - this._scrollPosition.left,\n      y: point.pageY - this._scrollPosition.top\n    };\n  }\n\n\n  /** Gets the pointer position on the page, accounting for any position constraints. */\n  private _getConstrainedPointerPosition(event: MouseEvent | TouchEvent): Point {\n    const point = this._getPointerPositionOnPage(event);\n    const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n\n    if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n      point.y = this._pickupPositionOnPage.y;\n    } else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n      point.x = this._pickupPositionOnPage.x;\n    }\n\n    if (this._boundaryRect) {\n      const {x: pickupX, y: pickupY} = this._pickupPositionInElement;\n      const boundaryRect = this._boundaryRect;\n      const previewRect = this._previewRect!;\n      const minY = boundaryRect.top + pickupY;\n      const maxY = boundaryRect.bottom - (previewRect.height - pickupY);\n      const minX = boundaryRect.left + pickupX;\n      const maxX = boundaryRect.right - (previewRect.width - pickupX);\n\n      point.x = clamp(point.x, minX, maxX);\n      point.y = clamp(point.y, minY, maxY);\n    }\n\n    return point;\n  }\n\n\n  /** Updates the current drag delta, based on the user's current pointer position on the page. */\n  private _updatePointerDirectionDelta(pointerPositionOnPage: Point) {\n    const {x, y} = pointerPositionOnPage;\n    const delta = this._pointerDirectionDelta;\n    const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n\n    // Amount of pixels the user has dragged since the last time the direction changed.\n    const changeX = Math.abs(x - positionSinceLastChange.x);\n    const changeY = Math.abs(y - positionSinceLastChange.y);\n\n    // Because we handle pointer events on a per-pixel basis, we don't want the delta\n    // to change for every pixel, otherwise anything that depends on it can look erratic.\n    // To make the delta more consistent, we track how much the user has moved since the last\n    // delta change and we only update it after it has reached a certain threshold.\n    if (changeX > this._config.pointerDirectionChangeThreshold) {\n      delta.x = x > positionSinceLastChange.x ? 1 : -1;\n      positionSinceLastChange.x = x;\n    }\n\n    if (changeY > this._config.pointerDirectionChangeThreshold) {\n      delta.y = y > positionSinceLastChange.y ? 1 : -1;\n      positionSinceLastChange.y = y;\n    }\n\n    return delta;\n  }\n\n  /** Toggles the native drag interactions, based on how many handles are registered. */\n  private _toggleNativeDragInteractions() {\n    if (!this._rootElement || !this._handles) {\n      return;\n    }\n\n    const shouldEnable = this.disabled || this._handles.length > 0;\n\n    if (shouldEnable !== this._nativeInteractionsEnabled) {\n      this._nativeInteractionsEnabled = shouldEnable;\n      toggleNativeDragInteractions(this._rootElement, shouldEnable);\n    }\n  }\n\n  /** Removes the manually-added event listeners from the root element. */\n  private _removeRootElementListeners(element: HTMLElement) {\n    element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n    element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n  }\n\n}\n\n/** Point on the page or within an element. */\ninterface Point {\n  x: number;\n  y: number;\n}\n\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nfunction getTransform(x: number, y: number): string {\n  // Round the transforms since some browsers will\n  // blur the elements for sub-pixel transforms.\n  return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n\n/** Creates a deep clone of an element. */\nfunction deepCloneNode(node: HTMLElement): HTMLElement {\n  const clone = node.cloneNode(true) as HTMLElement;\n  // Remove the `id` to avoid having multiple elements with the same id on the page.\n  clone.removeAttribute('id');\n  return clone;\n}\n\n/** Clamps a value between a minimum and a maximum. */\nfunction clamp(value: number, min: number, max: number) {\n  return Math.max(min, Math.min(max, value));\n}\n\n/**\n * Helper to remove an element from the DOM and to do all the necessary null checks.\n * @param element Element to be removed.\n */\nfunction removeElement(element: HTMLElement | null) {\n  if (element && element.parentNode) {\n    element.parentNode.removeChild(element);\n  }\n}\n\n/** Determines whether an event is a touch event. */\nfunction isTouchEvent(event: MouseEvent | TouchEvent): event is TouchEvent {\n  return event.type.startsWith('touch');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nexport function moveItemInArray<T = any>(array: T[], fromIndex: number, toIndex: number): void {\n  const from = clamp(fromIndex, array.length - 1);\n  const to = clamp(toIndex, array.length - 1);\n\n  if (from === to) {\n    return;\n  }\n\n  const target = array[from];\n  const delta = to < from ? -1 : 1;\n\n  for (let i = from; i !== to; i += delta) {\n    array[i] = array[i + delta];\n  }\n\n  array[to] = target;\n}\n\n\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nexport function transferArrayItem<T = any>(currentArray: T[],\n                                           targetArray: T[],\n                                           currentIndex: number,\n                                           targetIndex: number): void {\n  const from = clamp(currentIndex, currentArray.length - 1);\n  const to = clamp(targetIndex, targetArray.length);\n\n  if (currentArray.length) {\n    targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n  }\n}\n\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nexport function copyArrayItem<T = any>(currentArray: T[],\n                                       targetArray: T[],\n                                       currentIndex: number,\n                                       targetIndex: number): void {\n  const to = clamp(targetIndex, targetArray.length);\n\n  if (currentArray.length) {\n    targetArray.splice(to, 0, currentArray[currentIndex]);\n  }\n}\n\n/** Clamps a number between zero and a maximum. */\nfunction clamp(value: number, max: number): number {\n  return Math.max(0, Math.min(max, value));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ElementRef} from '@angular/core';\nimport {DragDropRegistry} from './drag-drop-registry';\nimport {Direction} from '@angular/cdk/bidi';\nimport {Subject} from 'rxjs';\nimport {moveItemInArray} from './drag-utils';\nimport {DragRefInternal as DragRef} from './drag-ref';\n\n\n/** Counter used to generate unique ids for drop refs. */\nlet _uniqueIdCounter = 0;\n\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n\n/**\n * Entry in the position cache for draggable items.\n * @docs-private\n */\ninterface CachedItemPosition {\n  /** Instance of the drag item. */\n  drag: DragRef;\n  /** Dimensions of the item. */\n  clientRect: ClientRect;\n  /** Amount by which the item has been moved since dragging started. */\n  offset: number;\n}\n\n/**\n * Internal compile-time-only representation of a `DropListRef`.\n * Used to avoid circular import issues between the `DropListRef` and the `DragRef`.\n * @docs-private\n */\nexport interface DropListRefInternal extends DropListRef {}\n\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n * @docs-private\n */\nexport class DropListRef<T = any> {\n  private _document: Document;\n\n  /** Element that the drop list is attached to. */\n  readonly element: HTMLElement;\n\n  /**\n   * Unique ID for the drop list.\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 8.0.0\n   */\n  id = `cdk-drop-list-ref-${_uniqueIdCounter++}`;\n\n  /** Whether starting a dragging sequence from this container is disabled. */\n  disabled: boolean = false;\n\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\n  lockAxis: 'x' | 'y';\n\n  /**\n   * Function that is used to determine whether an item\n   * is allowed to be moved into a drop container.\n   */\n  enterPredicate: (drag: DragRef, drop: DropListRef) => boolean = () => true;\n\n  /** Emits right before dragging has started. */\n  beforeStarted = new Subject<void>();\n\n  /**\n   * Emits when the user has moved a new drag item into this container.\n   */\n  entered = new Subject<{item: DragRef, container: DropListRef}>();\n\n  /**\n   * Emits when the user removes an item from the container\n   * by dragging it into another container.\n   */\n  exited = new Subject<{item: DragRef, container: DropListRef}>();\n\n  /** Emits when the user drops an item inside the container. */\n  dropped = new Subject<{\n    item: DragRef,\n    currentIndex: number,\n    previousIndex: number,\n    container: DropListRef,\n    previousContainer: DropListRef,\n    isPointerOverContainer: boolean\n  }>();\n\n  /** Emits as the user is swapping items while actively dragging. */\n  sorted = new Subject<{\n    previousIndex: number,\n    currentIndex: number,\n    container: DropListRef,\n    item: DragRef\n  }>();\n\n  /** Arbitrary data that can be attached to the drop list. */\n  data: T;\n\n  /** Whether an item in the list is being dragged. */\n  private _isDragging = false;\n\n  /** Cache of the dimensions of all the items inside the container. */\n  private _itemPositions: CachedItemPosition[] = [];\n\n  /** Cached `ClientRect` of the drop list. */\n  private _clientRect: ClientRect;\n\n  /**\n   * Draggable items that are currently active inside the container. Includes the items\n   * from `_draggables`, as well as any items that have been dragged in, but haven't\n   * been dropped yet.\n   */\n  private _activeDraggables: DragRef[];\n\n  /**\n   * Keeps track of the item that was last swapped with the dragged item, as\n   * well as what direction the pointer was moving in when the swap occured.\n   */\n  private _previousSwap = {drag: null as DragRef | null, delta: 0};\n\n  /** Draggable items in the container. */\n  private _draggables: ReadonlyArray<DragRef>;\n\n  /** Drop lists that are connected to the current one. */\n  private _siblings: ReadonlyArray<DropListRef> = [];\n\n  /** Direction in which the list is oriented. */\n  private _orientation: 'horizontal' | 'vertical' = 'vertical';\n\n  /** Connected siblings that currently have a dragged item. */\n  private _activeSiblings = new Set<DropListRef>();\n\n  /** Layout direction of the drop list. */\n  private _direction: Direction = 'ltr';\n\n  constructor(\n    element: ElementRef<HTMLElement> | HTMLElement,\n    private _dragDropRegistry: DragDropRegistry<DragRef, DropListRef>,\n    _document: any) {\n    _dragDropRegistry.registerDropContainer(this);\n    this._document = _document;\n    this.element = element instanceof ElementRef ? element.nativeElement : element;\n  }\n\n  /** Removes the drop list functionality from the DOM element. */\n  dispose() {\n    this.beforeStarted.complete();\n    this.entered.complete();\n    this.exited.complete();\n    this.dropped.complete();\n    this.sorted.complete();\n    this._activeSiblings.clear();\n    this._dragDropRegistry.removeDropContainer(this);\n  }\n\n  /** Whether an item from this list is currently being dragged. */\n  isDragging() {\n    return this._isDragging;\n  }\n\n  /** Starts dragging an item. */\n  start(): void {\n    this.beforeStarted.next();\n    this._isDragging = true;\n    this._activeDraggables = this._draggables.slice();\n    this._cacheOwnPosition();\n    this._cacheItemPositions();\n    this._siblings.forEach(sibling => sibling._startReceiving(this));\n  }\n\n  /**\n   * Emits an event to indicate that the user moved an item into the container.\n   * @param item Item that was moved into the container.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   */\n  enter(item: DragRef, pointerX: number, pointerY: number): void {\n    this.entered.next({item, container: this});\n    this.start();\n\n    // We use the coordinates of where the item entered the drop\n    // zone to figure out at which index it should be inserted.\n    const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n    const currentIndex = this._activeDraggables.indexOf(item);\n    const newPositionReference = this._activeDraggables[newIndex];\n    const placeholder = item.getPlaceholderElement();\n\n    // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n    // into another container and back again), we have to ensure that it isn't duplicated.\n    if (currentIndex > -1) {\n      this._activeDraggables.splice(currentIndex, 1);\n    }\n\n    // Don't use items that are being dragged as a reference, because\n    // their element has been moved down to the bottom of the body.\n    if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n      const element = newPositionReference.getRootElement();\n      element.parentElement!.insertBefore(placeholder, element);\n      this._activeDraggables.splice(newIndex, 0, item);\n    } else {\n      this.element.appendChild(placeholder);\n      this._activeDraggables.push(item);\n    }\n\n    // The transform needs to be cleared so it doesn't throw off the measurements.\n    placeholder.style.transform = '';\n\n    // Note that the positions were already cached when we called `start` above,\n    // but we need to refresh them since the amount of items has changed.\n    this._cacheItemPositions();\n  }\n\n  /**\n   * Removes an item from the container after it was dragged into another container by the user.\n   * @param item Item that was dragged out.\n   */\n  exit(item: DragRef): void {\n    this._reset();\n    this.exited.next({item, container: this});\n  }\n\n  /**\n   * Drops an item into this container.\n   * @param item Item being dropped into the container.\n   * @param currentIndex Index at which the item should be inserted.\n   * @param previousContainer Container from which the item got dragged in.\n   * @param isPointerOverContainer Whether the user's pointer was over the\n   *    container when the item was dropped.\n   */\n  drop(item: DragRef, currentIndex: number, previousContainer: DropListRef,\n    isPointerOverContainer: boolean): void {\n    this._reset();\n    this.dropped.next({\n      item,\n      currentIndex,\n      previousIndex: previousContainer.getItemIndex(item),\n      container: this,\n      previousContainer,\n      isPointerOverContainer\n    });\n  }\n\n  /**\n   * Sets the draggable items that are a part of this list.\n   * @param items Items that are a part of this list.\n   */\n  withItems(items: DragRef[]): this {\n    this._draggables = items;\n    items.forEach(item => item._withDropContainer(this));\n    return this;\n  }\n\n  /** Sets the layout direction of the drop list. */\n  withDirection(direction: Direction): this {\n    this._direction = direction;\n    return this;\n  }\n\n  /**\n   * Sets the containers that are connected to this one. When two or more containers are\n   * connected, the user will be allowed to transfer items between them.\n   * @param connectedTo Other containers that the current containers should be connected to.\n   */\n  connectedTo(connectedTo: DropListRef[]): this {\n    this._siblings = connectedTo.slice();\n    return this;\n  }\n\n  /**\n   * Sets the orientation of the container.\n   * @param orientation New orientation for the container.\n   */\n  withOrientation(orientation: 'vertical' | 'horizontal'): this {\n    this._orientation = orientation;\n    return this;\n  }\n\n  /**\n   * Figures out the index of an item in the container.\n   * @param item Item whose index should be determined.\n   */\n  getItemIndex(item: DragRef): number {\n    if (!this._isDragging) {\n      return this._draggables.indexOf(item);\n    }\n\n    // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n    // The rest of the logic still stands no matter what orientation we're in, however\n    // we need to invert the array when determining the index.\n    const items = this._orientation === 'horizontal' && this._direction === 'rtl' ?\n        this._itemPositions.slice().reverse() : this._itemPositions;\n\n    return findIndex(items, currentItem => currentItem.drag === item);\n  }\n\n  /**\n   * Whether the list is able to receive the item that\n   * is currently being dragged inside a connected drop list.\n   */\n  isReceiving(): boolean {\n    return this._activeSiblings.size > 0;\n  }\n\n  /**\n   * Sorts an item inside the container based on its position.\n   * @param item Item to be sorted.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   * @param pointerDelta Direction in which the pointer is moving along each axis.\n   */\n  _sortItem(item: DragRef, pointerX: number, pointerY: number,\n            pointerDelta: {x: number, y: number}): void {\n    // Don't sort the item if it's out of range.\n    if (!this._isPointerNearDropContainer(pointerX, pointerY)) {\n      return;\n    }\n\n    const siblings = this._itemPositions;\n    const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n\n    if (newIndex === -1 && siblings.length > 0) {\n      return;\n    }\n\n    const isHorizontal = this._orientation === 'horizontal';\n    const currentIndex = findIndex(siblings, currentItem => currentItem.drag === item);\n    const siblingAtNewPosition = siblings[newIndex];\n    const currentPosition = siblings[currentIndex].clientRect;\n    const newPosition = siblingAtNewPosition.clientRect;\n    const delta = currentIndex > newIndex ? 1 : -1;\n\n    this._previousSwap.drag = siblingAtNewPosition.drag;\n    this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n\n    // How many pixels the item's placeholder should be offset.\n    const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n\n    // How many pixels all the other items should be offset.\n    const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n\n    // Save the previous order of the items before moving the item to its new index.\n    // We use this to check whether an item has been moved as a result of the sorting.\n    const oldOrder = siblings.slice();\n\n    // Shuffle the array in place.\n    moveItemInArray(siblings, currentIndex, newIndex);\n\n    this.sorted.next({\n      previousIndex: currentIndex,\n      currentIndex: newIndex,\n      container: this,\n      item\n    });\n\n    siblings.forEach((sibling, index) => {\n      // Don't do anything if the position hasn't changed.\n      if (oldOrder[index] === sibling) {\n        return;\n      }\n\n      const isDraggedItem = sibling.drag === item;\n      const offset = isDraggedItem ? itemOffset : siblingOffset;\n      const elementToOffset = isDraggedItem ? item.getPlaceholderElement() :\n                                              sibling.drag.getRootElement();\n\n      // Update the offset to reflect the new position.\n      sibling.offset += offset;\n\n      // Since we're moving the items with a `transform`, we need to adjust their cached\n      // client rects to reflect their new position, as well as swap their positions in the cache.\n      // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n      // elements may be mid-animation which will give us a wrong result.\n      if (isHorizontal) {\n        // Round the transforms since some browsers will\n        // blur the elements, for sub-pixel transforms.\n        elementToOffset.style.transform = `translate3d(${Math.round(sibling.offset)}px, 0, 0)`;\n        adjustClientRect(sibling.clientRect, 0, offset);\n      } else {\n        elementToOffset.style.transform = `translate3d(0, ${Math.round(sibling.offset)}px, 0)`;\n        adjustClientRect(sibling.clientRect, offset, 0);\n      }\n    });\n  }\n\n  /** Caches the position of the drop list. */\n  private _cacheOwnPosition() {\n    this._clientRect = this.element.getBoundingClientRect();\n  }\n\n  /** Refreshes the position cache of the items and sibling containers. */\n  private _cacheItemPositions() {\n    const isHorizontal = this._orientation === 'horizontal';\n\n    this._itemPositions = this._activeDraggables.map(drag => {\n      const elementToMeasure = this._dragDropRegistry.isDragging(drag) ?\n          // If the element is being dragged, we have to measure the\n          // placeholder, because the element is hidden.\n          drag.getPlaceholderElement() :\n          drag.getRootElement();\n      const clientRect = elementToMeasure.getBoundingClientRect();\n\n      return {\n        drag,\n        offset: 0,\n        // We need to clone the `clientRect` here, because all the values on it are readonly\n        // and we need to be able to update them. Also we can't use a spread here, because\n        // the values on a `ClientRect` aren't own properties. See:\n        // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n        clientRect: {\n          top: clientRect.top,\n          right: clientRect.right,\n          bottom: clientRect.bottom,\n          left: clientRect.left,\n          width: clientRect.width,\n          height: clientRect.height\n        }\n      };\n    }).sort((a, b) => {\n      return isHorizontal ? a.clientRect.left - b.clientRect.left :\n                            a.clientRect.top - b.clientRect.top;\n    });\n  }\n\n  /** Resets the container to its initial state. */\n  private _reset() {\n    this._isDragging = false;\n\n    // TODO(crisbeto): may have to wait for the animations to finish.\n    this._activeDraggables.forEach(item => item.getRootElement().style.transform = '');\n    this._siblings.forEach(sibling => sibling._stopReceiving(this));\n    this._activeDraggables = [];\n    this._itemPositions = [];\n    this._previousSwap.drag = null;\n    this._previousSwap.delta = 0;\n  }\n\n  /**\n   * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n   * @param currentIndex Index of the item currently being dragged.\n   * @param siblings All of the items in the list.\n   * @param delta Direction in which the user is moving.\n   */\n  private _getSiblingOffsetPx(currentIndex: number,\n                              siblings: CachedItemPosition[],\n                              delta: 1 | -1) {\n\n    const isHorizontal = this._orientation === 'horizontal';\n    const currentPosition = siblings[currentIndex].clientRect;\n    const immediateSibling = siblings[currentIndex + delta * -1];\n    let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n\n    if (immediateSibling) {\n      const start = isHorizontal ? 'left' : 'top';\n      const end = isHorizontal ? 'right' : 'bottom';\n\n      // Get the spacing between the start of the current item and the end of the one immediately\n      // after it in the direction in which the user is dragging, or vice versa. We add it to the\n      // offset in order to push the element to where it will be when it's inline and is influenced\n      // by the `margin` of its siblings.\n      if (delta === -1) {\n        siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n      } else {\n        siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n      }\n    }\n\n    return siblingOffset;\n  }\n\n  /**\n   * Checks whether the pointer coordinates are close to the drop container.\n   * @param pointerX Coordinates along the X axis.\n   * @param pointerY Coordinates along the Y axis.\n   */\n  private _isPointerNearDropContainer(pointerX: number, pointerY: number): boolean {\n    const {top, right, bottom, left, width, height} = this._clientRect;\n    const xThreshold = width * DROP_PROXIMITY_THRESHOLD;\n    const yThreshold = height * DROP_PROXIMITY_THRESHOLD;\n\n    return pointerY > top - yThreshold && pointerY < bottom + yThreshold &&\n           pointerX > left - xThreshold && pointerX < right + xThreshold;\n  }\n\n  /**\n   * Gets the offset in pixels by which the item that is being dragged should be moved.\n   * @param currentPosition Current position of the item.\n   * @param newPosition Position of the item where the current item should be moved.\n   * @param delta Direction in which the user is moving.\n   */\n  private _getItemOffsetPx(currentPosition: ClientRect, newPosition: ClientRect, delta: 1 | -1) {\n    const isHorizontal = this._orientation === 'horizontal';\n    let itemOffset = isHorizontal ? newPosition.left - currentPosition.left :\n                                    newPosition.top - currentPosition.top;\n\n    // Account for differences in the item width/height.\n    if (delta === -1) {\n      itemOffset += isHorizontal ? newPosition.width - currentPosition.width :\n                                   newPosition.height - currentPosition.height;\n    }\n\n    return itemOffset;\n  }\n\n  /**\n   * Gets the index of an item in the drop container, based on the position of the user's pointer.\n   * @param item Item that is being sorted.\n   * @param pointerX Position of the user's pointer along the X axis.\n   * @param pointerY Position of the user's pointer along the Y axis.\n   * @param delta Direction in which the user is moving their pointer.\n   */\n  private _getItemIndexFromPointerPosition(item: DragRef, pointerX: number, pointerY: number,\n                                           delta?: {x: number, y: number}) {\n    const isHorizontal = this._orientation === 'horizontal';\n\n    return findIndex(this._itemPositions, ({drag, clientRect}, _, array) => {\n      if (drag === item) {\n        // If there's only one item left in the container, it must be\n        // the dragged item itself so we use it as a reference.\n        return array.length < 2;\n      }\n\n      if (delta) {\n        const direction = isHorizontal ? delta.x : delta.y;\n\n        // If the user is still hovering over the same item as last time, and they didn't change\n        // the direction in which they're dragging, we don't consider it a direction swap.\n        if (drag === this._previousSwap.drag && direction === this._previousSwap.delta) {\n          return false;\n        }\n      }\n\n      return isHorizontal ?\n          // Round these down since most browsers report client rects with\n          // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n          pointerX >= Math.floor(clientRect.left) && pointerX <= Math.floor(clientRect.right) :\n          pointerY >= Math.floor(clientRect.top) && pointerY <= Math.floor(clientRect.bottom);\n    });\n  }\n\n  /**\n   * Checks whether the user's pointer is positioned over the container.\n   * @param x Pointer position along the X axis.\n   * @param y Pointer position along the Y axis.\n   */\n  _isOverContainer(x: number, y: number): boolean {\n    return isInsideClientRect(this._clientRect, x, y);\n  }\n\n  /**\n   * Figures out whether an item should be moved into a sibling\n   * drop container, based on its current position.\n   * @param item Drag item that is being moved.\n   * @param x Position of the item along the X axis.\n   * @param y Position of the item along the Y axis.\n   */\n  _getSiblingContainerFromPosition(item: DragRef, x: number, y: number): DropListRef | undefined {\n    return this._siblings.find(sibling => sibling._canReceive(item, x, y));\n  }\n\n  /**\n   * Checks whether the drop list can receive the passed-in item.\n   * @param item Item that is being dragged into the list.\n   * @param x Position of the item along the X axis.\n   * @param y Position of the item along the Y axis.\n   */\n  _canReceive(item: DragRef, x: number, y: number): boolean {\n    if (!this.enterPredicate(item, this) || !isInsideClientRect(this._clientRect, x, y)) {\n      return false;\n    }\n\n    const elementFromPoint = this._document.elementFromPoint(x, y);\n\n    // If there's no element at the pointer position, then\n    // the client rect is probably scrolled out of the view.\n    if (!elementFromPoint) {\n      return false;\n    }\n\n    // The `ClientRect`, that we're using to find the container over which the user is\n    // hovering, doesn't give us any information on whether the element has been scrolled\n    // out of the view or whether it's overlapping with other containers. This means that\n    // we could end up transferring the item into a container that's invisible or is positioned\n    // below another one. We use the result from `elementFromPoint` to get the top-most element\n    // at the pointer position and to find whether it's one of the intersecting drop containers.\n    return elementFromPoint === this.element || this.element.contains(elementFromPoint);\n  }\n\n  /**\n   * Called by one of the connected drop lists when a dragging sequence has started.\n   * @param sibling Sibling in which dragging has started.\n   */\n  _startReceiving(sibling: DropListRef) {\n    const activeSiblings = this._activeSiblings;\n\n    if (!activeSiblings.has(sibling)) {\n      activeSiblings.add(sibling);\n      this._cacheOwnPosition();\n    }\n  }\n\n  /**\n   * Called by a connected drop list when dragging has stopped.\n   * @param sibling Sibling whose dragging has stopped.\n   */\n  _stopReceiving(sibling: DropListRef) {\n    this._activeSiblings.delete(sibling);\n  }\n}\n\n\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param clientRect `ClientRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\nfunction adjustClientRect(clientRect: ClientRect, top: number, left: number) {\n  clientRect.top += top;\n  clientRect.bottom = clientRect.top + clientRect.height;\n\n  clientRect.left += left;\n  clientRect.right = clientRect.left + clientRect.width;\n}\n\n\n/**\n * Finds the index of an item that matches a predicate function. Used as an equivalent\n * of `Array.prototype.find` which isn't part of the standard Google typings.\n * @param array Array in which to look for matches.\n * @param predicate Function used to determine whether an item is a match.\n */\nfunction findIndex<T>(array: T[],\n                      predicate: (value: T, index: number, obj: T[]) => boolean): number {\n\n  for (let i = 0; i < array.length; i++) {\n    if (predicate(array[i], i, array)) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\n\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param clientRect ClientRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nfunction isInsideClientRect(clientRect: ClientRect, x: number, y: number) {\n  const {top, bottom, left, right} = clientRect;\n  return y >= top && y <= bottom && x >= left && x <= right;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, NgZone, OnDestroy, Inject} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {Subject} from 'rxjs';\n\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n  passive: false,\n  capture: true\n});\n\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\n@Injectable({providedIn: 'root'})\nexport class DragDropRegistry<I, C extends {id: string}> implements OnDestroy {\n  private _document: Document;\n\n  /** Registered drop container instances. */\n  private _dropInstances = new Set<C>();\n\n  /** Registered drag item instances. */\n  private _dragInstances = new Set<I>();\n\n  /** Drag item instances that are currently being dragged. */\n  private _activeDragInstances = new Set<I>();\n\n  /** Keeps track of the event listeners that we've bound to the `document`. */\n  private _globalListeners = new Map<string, {\n    handler: (event: Event) => void,\n    options?: AddEventListenerOptions | boolean\n  }>();\n\n  /**\n   * Emits the `touchmove` or `mousemove` events that are dispatched\n   * while the user is dragging a drag item instance.\n   */\n  readonly pointerMove: Subject<TouchEvent | MouseEvent> = new Subject<TouchEvent | MouseEvent>();\n\n  /**\n   * Emits the `touchend` or `mouseup` events that are dispatched\n   * while the user is dragging a drag item instance.\n   */\n  readonly pointerUp: Subject<TouchEvent | MouseEvent> = new Subject<TouchEvent | MouseEvent>();\n\n  constructor(\n    private _ngZone: NgZone,\n    @Inject(DOCUMENT) _document: any) {\n    this._document = _document;\n  }\n\n  /** Adds a drop container to the registry. */\n  registerDropContainer(drop: C) {\n    if (!this._dropInstances.has(drop)) {\n      if (this.getDropContainer(drop.id)) {\n        throw Error(`Drop instance with id \"${drop.id}\" has already been registered.`);\n      }\n\n      this._dropInstances.add(drop);\n    }\n  }\n\n  /** Adds a drag item instance to the registry. */\n  registerDragItem(drag: I) {\n    this._dragInstances.add(drag);\n\n    // The `touchmove` event gets bound once, ahead of time, because WebKit\n    // won't preventDefault on a dynamically-added `touchmove` listener.\n    // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n    if (this._dragInstances.size === 1) {\n      this._ngZone.runOutsideAngular(() => {\n        // The event handler has to be explicitly active,\n        // because newer browsers make it passive by default.\n        this._document.addEventListener('touchmove', this._preventDefaultWhileDragging,\n            activeCapturingEventOptions);\n      });\n    }\n  }\n\n  /** Removes a drop container from the registry. */\n  removeDropContainer(drop: C) {\n    this._dropInstances.delete(drop);\n  }\n\n  /** Removes a drag item instance from the registry. */\n  removeDragItem(drag: I) {\n    this._dragInstances.delete(drag);\n    this.stopDragging(drag);\n\n    if (this._dragInstances.size === 0) {\n      this._document.removeEventListener('touchmove', this._preventDefaultWhileDragging,\n          activeCapturingEventOptions);\n    }\n  }\n\n  /**\n   * Starts the dragging sequence for a drag instance.\n   * @param drag Drag instance which is being dragged.\n   * @param event Event that initiated the dragging.\n   */\n  startDragging(drag: I, event: TouchEvent | MouseEvent) {\n    this._activeDragInstances.add(drag);\n\n    if (this._activeDragInstances.size === 1) {\n      const isTouchEvent = event.type.startsWith('touch');\n      const moveEvent = isTouchEvent ? 'touchmove' : 'mousemove';\n      const upEvent = isTouchEvent ? 'touchend' : 'mouseup';\n\n      // We explicitly bind __active__ listeners here, because newer browsers will default to\n      // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n      // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n      this._globalListeners\n        .set(moveEvent, {\n          handler: (e: Event) => this.pointerMove.next(e as TouchEvent | MouseEvent),\n          options: activeCapturingEventOptions\n        })\n        .set(upEvent, {\n          handler: (e: Event) => this.pointerUp.next(e as TouchEvent | MouseEvent),\n          options: true\n        })\n        // Preventing the default action on `mousemove` isn't enough to disable text selection\n        // on Safari so we need to prevent the selection event as well. Alternatively this can\n        // be done by setting `user-select: none` on the `body`, however it has causes a style\n        // recalculation which can be expensive on pages with a lot of elements.\n        .set('selectstart', {\n          handler: this._preventDefaultWhileDragging,\n          options: activeCapturingEventOptions\n        });\n\n      // TODO(crisbeto): prevent mouse wheel scrolling while\n      // dragging until we've set up proper scroll handling.\n      if (!isTouchEvent) {\n        this._globalListeners.set('wheel', {\n          handler: this._preventDefaultWhileDragging,\n          options: activeCapturingEventOptions\n        });\n      }\n\n      this._ngZone.runOutsideAngular(() => {\n        this._globalListeners.forEach((config, name) => {\n          this._document.addEventListener(name, config.handler, config.options);\n        });\n      });\n    }\n  }\n\n  /** Stops dragging a drag item instance. */\n  stopDragging(drag: I) {\n    this._activeDragInstances.delete(drag);\n\n    if (this._activeDragInstances.size === 0) {\n      this._clearGlobalListeners();\n    }\n  }\n\n  /** Gets whether a drag item instance is currently being dragged. */\n  isDragging(drag: I) {\n    return this._activeDragInstances.has(drag);\n  }\n\n  /**\n   * Gets a drop container by its id.\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 8.0.0\n   */\n  getDropContainer(id: string): C | undefined {\n    return Array.from(this._dropInstances).find(instance => instance.id === id);\n  }\n\n  ngOnDestroy() {\n    this._dragInstances.forEach(instance => this.removeDragItem(instance));\n    this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n    this._clearGlobalListeners();\n    this.pointerMove.complete();\n    this.pointerUp.complete();\n  }\n\n  /**\n   * Event listener that will prevent the default browser action while the user is dragging.\n   * @param event Event whose default action should be prevented.\n   */\n  private _preventDefaultWhileDragging = (event: Event) => {\n    if (this._activeDragInstances.size) {\n      event.preventDefault();\n    }\n  }\n\n  /** Clears out the global event listeners from the `document`. */\n  private _clearGlobalListeners() {\n    this._globalListeners.forEach((config, name) => {\n      this._document.removeEventListener(name, config.handler, config.options);\n    });\n\n    this._globalListeners.clear();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Inject, NgZone, ElementRef} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {DragRef, DragRefConfig} from './drag-ref';\nimport {DropListRef} from './drop-list-ref';\nimport {DragDropRegistry} from './drag-drop-registry';\n\n/** Default configuration to be used when creating a `DragRef`. */\nconst DEFAULT_CONFIG = {\n  dragStartThreshold: 5,\n  pointerDirectionChangeThreshold: 5\n};\n\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\n@Injectable({providedIn: 'root'})\nexport class DragDrop {\n  constructor(\n    @Inject(DOCUMENT) private _document: any,\n    private _ngZone: NgZone,\n    private _viewportRuler: ViewportRuler,\n    private _dragDropRegistry: DragDropRegistry<DragRef, DropListRef>) {}\n\n  /**\n   * Turns an element into a draggable item.\n   * @param element Element to which to attach the dragging functionality.\n   * @param config Object used to configure the dragging behavior.\n   */\n  createDrag<T = any>(element: ElementRef<HTMLElement> | HTMLElement,\n                config: DragRefConfig = DEFAULT_CONFIG): DragRef<T> {\n\n    return new DragRef<T>(element, config, this._document, this._ngZone, this._viewportRuler,\n        this._dragDropRegistry);\n  }\n\n  /**\n   * Turns an element into a drop list.\n   * @param element Element to which to attach the drop list functionality.\n   */\n  createDropList<T = any>(element: ElementRef<HTMLElement> | HTMLElement): DropListRef<T> {\n    return new DropListRef<T>(element, this._dragDropRegistry, this._document);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken, QueryList, ElementRef} from '@angular/core';\nimport {CdkDrag} from './directives/drag';\n\n\n/**\n * @deprecated To be removed. No longer being used. Previously the interface was used to avoid\n * circular imports between `CdkDrag` and `CdkDropList`, however now we're using the\n * `CdkDropListInternal` interface to achieve the same result, without having to maintain\n * this large of an interface.\n * @breaking-change 8.0.0\n */\nexport interface CdkDropListContainer<T = any> {\n  /** DOM node that corresponds to the drop container. */\n  element: ElementRef<HTMLElement>;\n\n  /** Arbitrary data to attach to all events emitted by this container. */\n  data: T;\n\n  /** Unique ID for the drop zone. */\n  id: string;\n\n  /** Direction in which the list is oriented. */\n  orientation: 'horizontal' | 'vertical';\n\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\n  lockAxis: 'x' | 'y';\n\n  /** Whether starting a dragging sequence from this container is disabled. */\n  disabled: boolean;\n\n  /** Starts dragging an item. */\n  start(): void;\n\n  /**\n   * Drops an item into this container.\n   * @param item Item being dropped into the container.\n   * @param currentIndex Index at which the item should be inserted.\n   * @param previousContainer Container from which the item got dragged in.\n   * @param isPointerOverContainer Whether the user's pointer was over the\n   *    container when the item was dropped.\n   */\n  drop(item: CdkDrag, currentIndex: number, previousContainer: Partial<CdkDropListContainer>,\n        isPointerOverContainer: boolean): void;\n\n  /**\n   * Emits an event to indicate that the user moved an item into the container.\n   * @param item Item that was moved into the container.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   */\n  enter(item: CdkDrag, pointerX: number, pointerY: number): void;\n\n  /**\n   * Removes an item from the container after it was dragged into another container by the user.\n   * @param item Item that was dragged out.\n   */\n  exit(item: CdkDrag): void;\n\n  /**\n   * Figures out the index of an item in the container.\n   * @param item Item whose index should be determined.\n   */\n  getItemIndex(item: CdkDrag): number;\n  _sortItem(item: CdkDrag, pointerX: number, pointerY: number, delta: {x: number, y: number}): void;\n  _draggables: QueryList<CdkDrag>;\n  _getSiblingContainerFromPosition(item: CdkDrag, x: number, y: number):\n      CdkDropListContainer | null;\n  _isOverContainer(x: number, y: number): boolean;\n}\n\n/**\n * Injection token that is used to provide a CdkDropList instance to CdkDrag.\n * Used for avoiding circular imports.\n */\nexport const CDK_DROP_LIST = new InjectionToken<CdkDropListContainer>('CDK_DROP_LIST');\n\n/**\n * Injection token that is used to provide a CdkDropList instance to CdkDrag.\n * Used for avoiding circular imports.\n * @deprecated Use `CDK_DROP_LIST` instead.\n * @breaking-change 8.0.0\n */\nexport const CDK_DROP_LIST_CONTAINER = CDK_DROP_LIST;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nexport const CDK_DRAG_PARENT = new InjectionToken<{}>('CDK_DRAG_PARENT');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, Optional, Input, OnDestroy} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Subject} from 'rxjs';\nimport {CDK_DRAG_PARENT} from '../drag-parent';\nimport {toggleNativeDragInteractions} from '../drag-styling';\n\n/** Handle that can be used to drag and CdkDrag instance. */\n@Directive({\n  selector: '[cdkDragHandle]',\n  host: {\n    'class': 'cdk-drag-handle'\n  }\n})\nexport class CdkDragHandle implements OnDestroy {\n  /** Closest parent draggable instance. */\n  _parentDrag: {} | undefined;\n\n  /** Emits when the state of the handle has changed. */\n  _stateChanges = new Subject<CdkDragHandle>();\n\n  /** Whether starting to drag through this handle is disabled. */\n  @Input('cdkDragHandleDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._stateChanges.next(this);\n  }\n  private _disabled = false;\n\n  constructor(\n    public element: ElementRef<HTMLElement>,\n    @Inject(CDK_DRAG_PARENT) @Optional() parentDrag?: any) {\n\n    this._parentDrag = parentDrag;\n    toggleNativeDragInteractions(element.nativeElement, false);\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, Input} from '@angular/core';\n\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\n@Directive({\n  selector: 'ng-template[cdkDragPlaceholder]'\n})\nexport class CdkDragPlaceholder<T = any> {\n  /** Context data to be added to the placeholder template instance. */\n  @Input() data: T;\n  constructor(public templateRef: TemplateRef<T>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, Input} from '@angular/core';\n\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\n@Directive({\n  selector: 'ng-template[cdkDragPreview]'\n})\nexport class CdkDragPreview<T = any> {\n  /** Context data to be added to the preview template instance. */\n  @Input() data: T;\n  constructor(public templateRef: TemplateRef<T>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  ViewContainerRef,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Observable, Observer, Subject, merge} from 'rxjs';\nimport {startWith, take, map, takeUntil, switchMap, tap} from 'rxjs/operators';\nimport {DragDropRegistry} from '../drag-drop-registry';\nimport {\n  CdkDragDrop,\n  CdkDragEnd,\n  CdkDragEnter,\n  CdkDragExit,\n  CdkDragMove,\n  CdkDragStart,\n  CdkDragRelease,\n} from '../drag-events';\nimport {CdkDragHandle} from './drag-handle';\nimport {CdkDragPlaceholder} from './drag-placeholder';\nimport {CdkDragPreview} from './drag-preview';\nimport {CDK_DROP_LIST} from '../drop-list-container';\nimport {CDK_DRAG_PARENT} from '../drag-parent';\nimport {DragRef, DragRefConfig} from '../drag-ref';\nimport {DropListRef} from '../drop-list-ref';\nimport {CdkDropListInternal as CdkDropList} from './drop-list';\nimport {DragDrop} from '../drag-drop';\n\n/** Injection token that can be used to configure the behavior of `CdkDrag`. */\nexport const CDK_DRAG_CONFIG = new InjectionToken<DragRefConfig>('CDK_DRAG_CONFIG', {\n  providedIn: 'root',\n  factory: CDK_DRAG_CONFIG_FACTORY\n});\n\n/** @docs-private */\nexport function CDK_DRAG_CONFIG_FACTORY(): DragRefConfig {\n  return {dragStartThreshold: 5, pointerDirectionChangeThreshold: 5};\n}\n\n/** Element that can be moved inside a CdkDropList container. */\n@Directive({\n  selector: '[cdkDrag]',\n  exportAs: 'cdkDrag',\n  host: {\n    'class': 'cdk-drag',\n    '[class.cdk-drag-disabled]': 'disabled',\n    '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n  },\n  providers: [{provide: CDK_DRAG_PARENT, useExisting: CdkDrag}]\n})\nexport class CdkDrag<T = any> implements AfterViewInit, OnChanges, OnDestroy {\n  private _destroyed = new Subject<void>();\n\n  /** Reference to the underlying drag instance. */\n  _dragRef: DragRef<CdkDrag<T>>;\n\n  /** Elements that can be used to drag the draggable item. */\n  @ContentChildren(CdkDragHandle, {descendants: true}) _handles: QueryList<CdkDragHandle>;\n\n  /** Element that will be used as a template to create the draggable item's preview. */\n  @ContentChild(CdkDragPreview) _previewTemplate: CdkDragPreview;\n\n  /** Template for placeholder element rendered to show where a draggable would be dropped. */\n  @ContentChild(CdkDragPlaceholder) _placeholderTemplate: CdkDragPlaceholder;\n\n  /** Arbitrary data to attach to this drag instance. */\n  @Input('cdkDragData') data: T;\n\n  /** Locks the position of the dragged element along the specified axis. */\n  @Input('cdkDragLockAxis') lockAxis: 'x' | 'y';\n\n  /**\n   * Selector that will be used to determine the root draggable element, starting from\n   * the `cdkDrag` element and going up the DOM. Passing an alternate root element is useful\n   * when trying to enable dragging on an element that you might not have access to.\n   */\n  @Input('cdkDragRootElement') rootElementSelector: string;\n\n  /**\n   * Selector that will be used to determine the element to which the draggable's position will\n   * be constrained. Matching starts from the element's parent and goes up the DOM until a matching\n   * element has been found.\n   */\n  @Input('cdkDragBoundary') boundaryElementSelector: string;\n\n  /** Whether starting to drag this element is disabled. */\n  @Input('cdkDragDisabled')\n  get disabled(): boolean {\n    return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._dragRef.disabled = this._disabled;\n  }\n  private _disabled = false;\n\n  /** Emits when the user starts dragging the item. */\n  @Output('cdkDragStarted') started: EventEmitter<CdkDragStart> = new EventEmitter<CdkDragStart>();\n\n  /** Emits when the user has released a drag item, before any animations have started. */\n  @Output('cdkDragReleased') released: EventEmitter<CdkDragRelease> =\n      new EventEmitter<CdkDragRelease>();\n\n  /** Emits when the user stops dragging an item in the container. */\n  @Output('cdkDragEnded') ended: EventEmitter<CdkDragEnd> = new EventEmitter<CdkDragEnd>();\n\n  /** Emits when the user has moved the item into a new container. */\n  @Output('cdkDragEntered') entered: EventEmitter<CdkDragEnter<any>> =\n      new EventEmitter<CdkDragEnter<any>>();\n\n  /** Emits when the user removes the item its container by dragging it into another container. */\n  @Output('cdkDragExited') exited: EventEmitter<CdkDragExit<any>> =\n      new EventEmitter<CdkDragExit<any>>();\n\n  /** Emits when the user drops the item inside a container. */\n  @Output('cdkDragDropped') dropped: EventEmitter<CdkDragDrop<any>> =\n      new EventEmitter<CdkDragDrop<any>>();\n\n  /**\n   * Emits as the user is dragging the item. Use with caution,\n   * because this event will fire for every pixel that the user has dragged.\n   */\n  @Output('cdkDragMoved') moved: Observable<CdkDragMove<T>> =\n      new Observable((observer: Observer<CdkDragMove<T>>) => {\n        const subscription = this._dragRef.moved.pipe(map(movedEvent => ({\n          source: this,\n          pointerPosition: movedEvent.pointerPosition,\n          event: movedEvent.event,\n          delta: movedEvent.delta\n        }))).subscribe(observer);\n\n        return () => {\n          subscription.unsubscribe();\n        };\n      });\n\n  constructor(\n    /** Element that the draggable is attached to. */\n    public element: ElementRef<HTMLElement>,\n    /** Droppable container that the draggable is a part of. */\n    @Inject(CDK_DROP_LIST) @Optional() @SkipSelf()\n    public dropContainer: CdkDropList,\n    @Inject(DOCUMENT) private _document: any,\n    private _ngZone: NgZone,\n    private _viewContainerRef: ViewContainerRef,\n    viewportRuler: ViewportRuler,\n    dragDropRegistry: DragDropRegistry<DragRef, DropListRef>,\n    @Inject(CDK_DRAG_CONFIG) config: DragRefConfig,\n    @Optional() private _dir: Directionality,\n\n    /**\n     * @deprecated `viewportRuler`, `dragDropRegistry` and `_changeDetectorRef` parameters\n     * to be removed. Also `dragDrop` parameter to be made required.\n     * @breaking-change 8.0.0.\n     */\n    dragDrop?: DragDrop,\n    private _changeDetectorRef?: ChangeDetectorRef) {\n\n\n    // @breaking-change 8.0.0 Remove null check once the paramter is made required.\n    if (dragDrop) {\n      this._dragRef = dragDrop.createDrag(element, config);\n    } else {\n      this._dragRef = new DragRef(element, config, _document, _ngZone, viewportRuler,\n          dragDropRegistry);\n    }\n\n    this._dragRef.data = this;\n    this._syncInputs(this._dragRef);\n    this._handleEvents(this._dragRef);\n  }\n\n  /**\n   * Returns the element that is being used as a placeholder\n   * while the current element is being dragged.\n   */\n  getPlaceholderElement(): HTMLElement {\n    return this._dragRef.getPlaceholderElement();\n  }\n\n  /** Returns the root draggable element. */\n  getRootElement(): HTMLElement {\n    return this._dragRef.getRootElement();\n  }\n\n  /** Resets a standalone drag item to its initial position. */\n  reset(): void {\n    this._dragRef.reset();\n  }\n\n  ngAfterViewInit() {\n    // We need to wait for the zone to stabilize, in order for the reference\n    // element to be in the proper place in the DOM. This is mostly relevant\n    // for draggable elements inside portals since they get stamped out in\n    // their original DOM position and then they get transferred to the portal.\n    this._ngZone.onStable.asObservable()\n      .pipe(take(1), takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._updateRootElement();\n\n        // Listen for any newly-added handles.\n        this._handles.changes.pipe(\n          startWith(this._handles),\n          // Sync the new handles with the DragRef.\n          tap((handles: QueryList<CdkDragHandle>) => {\n            const childHandleElements = handles\n              .filter(handle => handle._parentDrag === this)\n              .map(handle => handle.element);\n            this._dragRef.withHandles(childHandleElements);\n          }),\n          // Listen if the state of any of the handles changes.\n          switchMap((handles: QueryList<CdkDragHandle>) => {\n            return merge(...handles.map(item => item._stateChanges));\n          }),\n          takeUntil(this._destroyed)\n        ).subscribe(handleInstance => {\n          // Enabled/disable the handle that changed in the DragRef.\n          const dragRef = this._dragRef;\n          const handle = handleInstance.element.nativeElement;\n          handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n        });\n      });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const rootSelectorChange = changes['rootElementSelector'];\n\n    // We don't have to react to the first change since it's being\n    // handled in `ngAfterViewInit` where it needs to be deferred.\n    if (rootSelectorChange && !rootSelectorChange.firstChange) {\n      this._updateRootElement();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._dragRef.dispose();\n  }\n\n  /** Syncs the root element with the `DragRef`. */\n  private _updateRootElement() {\n    const element = this.element.nativeElement;\n    const rootElement = this.rootElementSelector ?\n        getClosestMatchingAncestor(element, this.rootElementSelector) : element;\n\n    if (rootElement && rootElement.nodeType !== this._document.ELEMENT_NODE) {\n      throw Error(`cdkDrag must be attached to an element node. ` +\n                  `Currently attached to \"${rootElement.nodeName}\".`);\n    }\n\n    this._dragRef.withRootElement(rootElement || element);\n  }\n\n  /** Gets the boundary element, based on the `boundaryElementSelector`. */\n  private _getBoundaryElement() {\n    const selector = this.boundaryElementSelector;\n    return selector ? getClosestMatchingAncestor(this.element.nativeElement, selector) : null;\n  }\n\n  /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n  private _syncInputs(ref: DragRef<CdkDrag<T>>) {\n    ref.beforeStarted.subscribe(() => {\n      if (!ref.isDragging()) {\n        const dir = this._dir;\n        const placeholder = this._placeholderTemplate ? {\n          template: this._placeholderTemplate.templateRef,\n          context: this._placeholderTemplate.data,\n          viewContainer: this._viewContainerRef\n        } : null;\n        const preview = this._previewTemplate ? {\n          template: this._previewTemplate.templateRef,\n          context: this._previewTemplate.data,\n          viewContainer: this._viewContainerRef\n        } : null;\n\n        ref.disabled = this.disabled;\n        ref.lockAxis = this.lockAxis;\n        ref\n          .withBoundaryElement(this._getBoundaryElement())\n          .withPlaceholderTemplate(placeholder)\n          .withPreviewTemplate(preview);\n\n        if (dir) {\n          ref.withDirection(dir.value);\n        }\n      }\n    });\n  }\n\n  /** Handles the events from the underlying `DragRef`. */\n  private _handleEvents(ref: DragRef<CdkDrag<T>>) {\n    ref.started.subscribe(() => {\n      this.started.emit({source: this});\n\n      // Since all of these events run outside of change detection,\n      // we need to ensure that everything is marked correctly.\n      if (this._changeDetectorRef) {\n        // @breaking-change 8.0.0 Remove null check for _changeDetectorRef\n        this._changeDetectorRef.markForCheck();\n      }\n    });\n\n    ref.released.subscribe(() => {\n      this.released.emit({source: this});\n    });\n\n    ref.ended.subscribe(() => {\n      this.ended.emit({source: this});\n\n      // Since all of these events run outside of change detection,\n      // we need to ensure that everything is marked correctly.\n      if (this._changeDetectorRef) {\n        // @breaking-change 8.0.0 Remove null check for _changeDetectorRef\n        this._changeDetectorRef.markForCheck();\n      }\n    });\n\n    ref.entered.subscribe(event => {\n      this.entered.emit({\n        container: event.container.data,\n        item: this\n      });\n    });\n\n    ref.exited.subscribe(event => {\n      this.exited.emit({\n        container: event.container.data,\n        item: this\n      });\n    });\n\n    ref.dropped.subscribe(event => {\n      this.dropped.emit({\n        previousIndex: event.previousIndex,\n        currentIndex: event.currentIndex,\n        previousContainer: event.previousContainer.data,\n        container: event.container.data,\n        isPointerOverContainer: event.isPointerOverContainer,\n        item: this\n      });\n    });\n  }\n}\n\n/** Gets the closest ancestor of an element that matches a selector. */\nfunction getClosestMatchingAncestor(element: HTMLElement, selector: string) {\n  let currentElement = element.parentElement as HTMLElement | null;\n\n  while (currentElement) {\n    // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\n    if (currentElement.matches ? currentElement.matches(selector) :\n        (currentElement as any).msMatchesSelector(selector)) {\n      return currentElement;\n    }\n\n    currentElement = currentElement.parentElement;\n  }\n\n  return null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, OnDestroy, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\n@Directive({\n  selector: '[cdkDropListGroup]',\n  exportAs: 'cdkDropListGroup',\n})\nexport class CdkDropListGroup<T> implements OnDestroy {\n  /** Drop lists registered inside the group. */\n  readonly _items = new Set<T>();\n\n  /** Whether starting a dragging sequence from inside this group is disabled. */\n  @Input('cdkDropListGroupDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled = false;\n\n  ngOnDestroy() {\n    this._items.clear();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceArray, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  Optional,\n  Directive,\n  ChangeDetectorRef,\n  SkipSelf,\n  Inject,\n  AfterContentInit,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkDrag} from './drag';\nimport {DragDropRegistry} from '../drag-drop-registry';\nimport {CdkDragDrop, CdkDragEnter, CdkDragExit, CdkDragSortEvent} from '../drag-events';\nimport {CDK_DROP_LIST_CONTAINER, CdkDropListContainer} from '../drop-list-container';\nimport {CdkDropListGroup} from './drop-list-group';\nimport {DropListRef} from '../drop-list-ref';\nimport {DragRef} from '../drag-ref';\nimport {DragDrop} from '../drag-drop';\nimport {Subject} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\n\n/** Counter used to generate unique ids for drop zones. */\nlet _uniqueIdCounter = 0;\n\n/**\n * Internal compile-time-only representation of a `CdkDropList`.\n * Used to avoid circular import issues between the `CdkDropList` and the `CdkDrag`.\n * @docs-private\n */\nexport interface CdkDropListInternal extends CdkDropList {}\n\n// @breaking-change 8.0.0 `CdkDropList` implements `CdkDropListContainer` for backwards\n// compatiblity. The implements clause, as well as all the methods that it enforces can\n// be removed when `CdkDropListContainer` is deleted.\n\n/** Container that wraps a set of draggable items. */\n@Directive({\n  selector: '[cdkDropList], cdk-drop-list',\n  exportAs: 'cdkDropList',\n  providers: [\n    // Prevent child drop lists from picking up the same group as their parent.\n    {provide: CdkDropListGroup, useValue: undefined},\n    {provide: CDK_DROP_LIST_CONTAINER, useExisting: CdkDropList},\n  ],\n  host: {\n    'class': 'cdk-drop-list',\n    '[id]': 'id',\n    '[class.cdk-drop-list-disabled]': 'disabled',\n    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n  }\n})\nexport class CdkDropList<T = any> implements CdkDropListContainer, AfterContentInit, OnDestroy {\n  /** Emits when the list has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Keeps track of the drop lists that are currently on the page. */\n  private static _dropLists: CdkDropList[] = [];\n\n  /** Reference to the underlying drop list instance. */\n  _dropListRef: DropListRef<CdkDropList<T>>;\n\n  /** Draggable items in the container. */\n  @ContentChildren(forwardRef(() => CdkDrag), {\n    // Explicitly set to false since some of the logic below makes assumptions about it.\n    // The `.withItems` call below should be updated if we ever need to switch this to `true`.\n    descendants: false\n  }) _draggables: QueryList<CdkDrag>;\n\n  /**\n   * Other draggable containers that this container is connected to and into which the\n   * container's items can be transferred. Can either be references to other drop containers,\n   * or their unique IDs.\n   */\n  @Input('cdkDropListConnectedTo')\n  connectedTo: (CdkDropList | string)[] | CdkDropList | string = [];\n\n  /** Arbitrary data to attach to this container. */\n  @Input('cdkDropListData') data: T;\n\n  /** Direction in which the list is oriented. */\n  @Input('cdkDropListOrientation') orientation: 'horizontal' | 'vertical' = 'vertical';\n\n  /**\n   * Unique ID for the drop zone. Can be used as a reference\n   * in the `connectedTo` of another `CdkDropList`.\n   */\n  @Input() id: string = `cdk-drop-list-${_uniqueIdCounter++}`;\n\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\n  @Input('cdkDropListLockAxis') lockAxis: 'x' | 'y';\n\n  /** Whether starting a dragging sequence from this container is disabled. */\n  @Input('cdkDropListDisabled')\n  get disabled(): boolean {\n    return this._disabled || (!!this._group && this._group.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled = false;\n\n  /**\n   * Function that is used to determine whether an item\n   * is allowed to be moved into a drop container.\n   */\n  @Input('cdkDropListEnterPredicate')\n  enterPredicate: (drag: CdkDrag, drop: CdkDropList) => boolean = () => true\n\n  /** Emits when the user drops an item inside the container. */\n  @Output('cdkDropListDropped')\n  dropped: EventEmitter<CdkDragDrop<T, any>> = new EventEmitter<CdkDragDrop<T, any>>();\n\n  /**\n   * Emits when the user has moved a new drag item into this container.\n   */\n  @Output('cdkDropListEntered')\n  entered: EventEmitter<CdkDragEnter<T>> = new EventEmitter<CdkDragEnter<T>>();\n\n  /**\n   * Emits when the user removes an item from the container\n   * by dragging it into another container.\n   */\n  @Output('cdkDropListExited')\n  exited: EventEmitter<CdkDragExit<T>> = new EventEmitter<CdkDragExit<T>>();\n\n  /** Emits as the user is swapping items while actively dragging. */\n  @Output('cdkDropListSorted')\n  sorted: EventEmitter<CdkDragSortEvent<T>> = new EventEmitter<CdkDragSortEvent<T>>();\n\n  constructor(\n    /** Element that the drop list is attached to. */\n    public element: ElementRef<HTMLElement>,\n    dragDropRegistry: DragDropRegistry<DragRef, DropListRef>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() private _dir?: Directionality,\n    @Optional() @SkipSelf() private _group?: CdkDropListGroup<CdkDropList>,\n    @Optional() @Inject(DOCUMENT) _document?: any,\n\n    /**\n     * @deprecated `dragDropRegistry` and `_document` parameters to be removed.\n     * Also `dragDrop` parameter to be made required.\n     * @breaking-change 8.0.0.\n     */\n    dragDrop?: DragDrop) {\n\n    // @breaking-change 8.0.0 Remove null check once `dragDrop` parameter is made required.\n    if (dragDrop) {\n      this._dropListRef = dragDrop.createDropList(element);\n    } else {\n      this._dropListRef = new DropListRef(element, dragDropRegistry, _document || document);\n    }\n\n    this._dropListRef.data = this;\n    this._dropListRef.enterPredicate = (drag: DragRef<CdkDrag>, drop: DropListRef<CdkDropList>) => {\n      return this.enterPredicate(drag.data, drop.data);\n    };\n\n    this._syncInputs(this._dropListRef);\n    this._handleEvents(this._dropListRef);\n    CdkDropList._dropLists.push(this);\n\n    if (_group) {\n      _group._items.add(this);\n    }\n  }\n\n  ngAfterContentInit() {\n    this._draggables.changes\n      .pipe(startWith(this._draggables), takeUntil(this._destroyed))\n      .subscribe((items: QueryList<CdkDrag>) => {\n        this._dropListRef.withItems(items.map(drag => drag._dragRef));\n      });\n  }\n\n  ngOnDestroy() {\n    const index = CdkDropList._dropLists.indexOf(this);\n\n    if (index > -1) {\n      CdkDropList._dropLists.splice(index, 1);\n    }\n\n    if (this._group) {\n      this._group._items.delete(this);\n    }\n\n    this._dropListRef.dispose();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Starts dragging an item. */\n  start(): void {\n    this._dropListRef.start();\n  }\n\n  /**\n   * Drops an item into this container.\n   * @param item Item being dropped into the container.\n   * @param currentIndex Index at which the item should be inserted.\n   * @param previousContainer Container from which the item got dragged in.\n   * @param isPointerOverContainer Whether the user's pointer was over the\n   *    container when the item was dropped.\n   */\n  drop(item: CdkDrag, currentIndex: number, previousContainer: Partial<CdkDropListContainer>,\n    isPointerOverContainer: boolean): void {\n    this._dropListRef.drop(item._dragRef, currentIndex,\n      (previousContainer as CdkDropList)._dropListRef, isPointerOverContainer);\n  }\n\n  /**\n   * Emits an event to indicate that the user moved an item into the container.\n   * @param item Item that was moved into the container.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   */\n  enter(item: CdkDrag, pointerX: number, pointerY: number): void {\n    this._dropListRef.enter(item._dragRef, pointerX, pointerY);\n  }\n\n  /**\n   * Removes an item from the container after it was dragged into another container by the user.\n   * @param item Item that was dragged out.\n   */\n  exit(item: CdkDrag): void {\n    this._dropListRef.exit(item._dragRef);\n  }\n\n  /**\n   * Figures out the index of an item in the container.\n   * @param item Item whose index should be determined.\n   */\n  getItemIndex(item: CdkDrag): number {\n    return this._dropListRef.getItemIndex(item._dragRef);\n  }\n\n  /**\n   * Sorts an item inside the container based on its position.\n   * @param item Item to be sorted.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   * @param pointerDelta Direction in which the pointer is moving along each axis.\n   */\n  _sortItem(item: CdkDrag, pointerX: number, pointerY: number,\n            pointerDelta: {x: number, y: number}): void {\n    return this._dropListRef._sortItem(item._dragRef, pointerX, pointerY, pointerDelta);\n  }\n\n  /**\n   * Figures out whether an item should be moved into a sibling\n   * drop container, based on its current position.\n   * @param item Drag item that is being moved.\n   * @param x Position of the item along the X axis.\n   * @param y Position of the item along the Y axis.\n   */\n  _getSiblingContainerFromPosition(item: CdkDrag, x: number, y: number):\n    CdkDropListContainer | null {\n    const result = this._dropListRef._getSiblingContainerFromPosition(item._dragRef, x, y);\n    return result ? result.data : null;\n  }\n\n  /**\n   * Checks whether the user's pointer is positioned over the container.\n   * @param x Pointer position along the X axis.\n   * @param y Pointer position along the Y axis.\n   */\n  _isOverContainer(x: number, y: number): boolean {\n    return this._dropListRef._isOverContainer(x, y);\n  }\n\n  /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n  private _syncInputs(ref: DropListRef<CdkDropList>) {\n    if (this._dir) {\n      this._dir.change\n        .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n        .subscribe(value => ref.withDirection(value));\n    }\n\n    ref.beforeStarted.subscribe(() => {\n      const siblings = coerceArray(this.connectedTo).map(drop => {\n        return typeof drop === 'string' ?\n            CdkDropList._dropLists.find(list => list.id === drop)! : drop;\n      });\n\n      if (this._group) {\n        this._group._items.forEach(drop => {\n          if (siblings.indexOf(drop) === -1) {\n            siblings.push(drop);\n          }\n        });\n      }\n\n      ref.lockAxis = this.lockAxis;\n      ref\n        .connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef))\n        .withOrientation(this.orientation);\n    });\n  }\n\n  /** Handles events from the underlying DropListRef. */\n  private _handleEvents(ref: DropListRef<CdkDropList>) {\n    ref.beforeStarted.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n\n    ref.entered.subscribe(event => {\n      this.entered.emit({\n        container: this,\n        item: event.item.data\n      });\n    });\n\n    ref.exited.subscribe(event => {\n      this.exited.emit({\n        container: this,\n        item: event.item.data\n      });\n    });\n\n    ref.sorted.subscribe(event => {\n      this.sorted.emit({\n        previousIndex: event.previousIndex,\n        currentIndex: event.currentIndex,\n        container: this,\n        item: event.item.data\n      });\n    });\n\n    ref.dropped.subscribe(event => {\n      this.dropped.emit({\n        previousIndex: event.previousIndex,\n        currentIndex: event.currentIndex,\n        previousContainer: event.previousContainer.data,\n        container: event.container.data,\n        item: event.item.data,\n        isPointerOverContainer: event.isPointerOverContainer\n      });\n\n      // Mark for check since all of these events run outside of change\n      // detection and we're not guaranteed for something else to have triggered it.\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkDropList} from './directives/drop-list';\nimport {CdkDropListGroup} from './directives/drop-list-group';\nimport {CdkDrag} from './directives/drag';\nimport {CdkDragHandle} from './directives/drag-handle';\nimport {CdkDragPreview} from './directives/drag-preview';\nimport {CdkDragPlaceholder} from './directives/drag-placeholder';\nimport {DragDrop} from './drag-drop';\n\n@NgModule({\n  declarations: [\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n  ],\n  exports: [\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n  ],\n  providers: [\n    DragDrop,\n  ]\n})\nexport class DragDropModule {}\n"]},"metadata":{},"sourceType":"module"}