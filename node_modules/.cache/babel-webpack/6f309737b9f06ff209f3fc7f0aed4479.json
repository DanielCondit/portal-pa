{"ast":null,"code":"import _createClass from \"/Users/condit/projects/portal-pa/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/Users/condit/projects/portal-pa/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NgModule, Injectable, NgZone, defineInjectable, inject } from '@angular/core';\nimport { Platform } from '@angular/cdk/platform';\nimport { asapScheduler, combineLatest, fromEventPattern, Subject } from 'rxjs';\nimport { debounceTime, map, startWith, takeUntil } from 'rxjs/operators';\nimport { coerceArray } from '@angular/cdk/coercion';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\n\nvar LayoutModule = function LayoutModule() {\n  _classCallCheck(this, LayoutModule);\n};\n\nLayoutModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: LayoutModule\n});\nLayoutModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function LayoutModule_Factory(t) {\n    return new (t || LayoutModule)();\n  }\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(LayoutModule, [{\n    type: NgModule,\n    args: [{}]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Global registry for all dynamically-created, injected media queries.\n * @type {?}\n */\n\n\nvar mediaQueriesForWebkitCompatibility = new Set();\n/**\n * Style tag that holds all of the dynamically-created media queries.\n * @type {?}\n */\n\nvar mediaQueryStyleNode;\n/**\n * A utility for calling matchMedia queries.\n */\n\nvar MediaMatcher = /*#__PURE__*/function () {\n  /**\n   * @param {?} platform\n   */\n  function MediaMatcher(platform) {\n    _classCallCheck(this, MediaMatcher);\n\n    this.platform = platform;\n    this._matchMedia = this.platform.isBrowser && window.matchMedia ? // matchMedia is bound to the window scope intentionally as it is an illegal invocation to\n    // call it from a different scope.\n    window.matchMedia.bind(window) : noopMatchMedia;\n  }\n  /**\n   * Evaluates the given media query and returns the native MediaQueryList from which results\n   * can be retrieved.\n   * Confirms the layout engine will trigger for the selector query provided and returns the\n   * MediaQueryList for the query provided.\n   * @param {?} query\n   * @return {?}\n   */\n\n\n  _createClass(MediaMatcher, [{\n    key: \"matchMedia\",\n    value: function matchMedia(query) {\n      if (this.platform.WEBKIT) {\n        createEmptyStyleRule(query);\n      }\n\n      return this._matchMedia(query);\n    }\n  }]);\n\n  return MediaMatcher;\n}();\n\nMediaMatcher.ɵfac = function MediaMatcher_Factory(t) {\n  return new (t || MediaMatcher)(ɵngcc0.ɵɵinject(ɵngcc1.Platform));\n};\n\nMediaMatcher.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: MediaMatcher,\n  factory: MediaMatcher.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nMediaMatcher.ctorParameters = function () {\n  return [{\n    type: Platform\n  }];\n};\n/** @nocollapse */\n\n\nMediaMatcher.ngInjectableDef = defineInjectable({\n  factory: function MediaMatcher_Factory() {\n    return new MediaMatcher(inject(Platform));\n  },\n  token: MediaMatcher,\n  providedIn: \"root\"\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MediaMatcher, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.Platform\n    }];\n  }, null);\n})();\n/**\n * For Webkit engines that only trigger the MediaQueryListListener when\n * there is at least one CSS selector for the respective media query.\n * @param {?} query\n * @return {?}\n */\n\n\nfunction createEmptyStyleRule(query) {\n  if (mediaQueriesForWebkitCompatibility.has(query)) {\n    return;\n  }\n\n  try {\n    if (!mediaQueryStyleNode) {\n      mediaQueryStyleNode = document.createElement('style');\n      mediaQueryStyleNode.setAttribute('type', 'text/css');\n\n      /** @type {?} */\n      document.head.appendChild(mediaQueryStyleNode);\n    }\n\n    if (mediaQueryStyleNode.sheet) {\n      /** @type {?} */\n      mediaQueryStyleNode.sheet.insertRule(\"@media \".concat(query, \" {.fx-query-test{ }}\"), 0);\n      mediaQueriesForWebkitCompatibility.add(query);\n    }\n  } catch (e) {\n    console.error(e);\n  }\n}\n/**\n * No-op matchMedia replacement for non-browser platforms.\n * @param {?} query\n * @return {?}\n */\n\n\nfunction noopMatchMedia(query) {\n  // Use `as any` here to avoid adding additional necessary properties for\n  // the noop matcher.\n  return (\n    /** @type {?} */\n    {\n      matches: query === 'all' || query === '',\n      media: query,\n      addListener: function addListener() {},\n      removeListener: function removeListener() {}\n    }\n  );\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Utility for checking the matching state of \\@media queries.\n */\n\n\nvar BreakpointObserver = /*#__PURE__*/function () {\n  /**\n   * @param {?} mediaMatcher\n   * @param {?} zone\n   */\n  function BreakpointObserver(mediaMatcher, zone) {\n    _classCallCheck(this, BreakpointObserver);\n\n    this.mediaMatcher = mediaMatcher;\n    this.zone = zone;\n    /**\n     * A map of all media queries currently being listened for.\n     */\n\n    this._queries = new Map();\n    /**\n     * A subject for all other observables to takeUntil based on.\n     */\n\n    this._destroySubject = new Subject();\n  }\n  /**\n   * Completes the active subject, signalling to all other observables to complete.\n   * @return {?}\n   */\n\n\n  _createClass(BreakpointObserver, [{\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._destroySubject.next();\n\n      this._destroySubject.complete();\n    }\n    /**\n     * Whether one or more media queries match the current viewport size.\n     * @param {?} value One or more media queries to check.\n     * @return {?} Whether any of the media queries match.\n     */\n\n  }, {\n    key: \"isMatched\",\n    value: function isMatched(value) {\n      var _this = this;\n\n      /** @type {?} */\n      var queries = splitQueries(coerceArray(value));\n      return queries.some(function (mediaQuery) {\n        return _this._registerQuery(mediaQuery).mql.matches;\n      });\n    }\n    /**\n     * Gets an observable of results for the given queries that will emit new results for any changes\n     * in matching of the given queries.\n     * @param {?} value One or more media queries to check.\n     * @return {?} A stream of matches for the given queries.\n     */\n\n  }, {\n    key: \"observe\",\n    value: function observe(value) {\n      var _this2 = this;\n\n      /** @type {?} */\n      var queries = splitQueries(coerceArray(value));\n      /** @type {?} */\n\n      var observables = queries.map(function (query) {\n        return _this2._registerQuery(query).observable;\n      });\n      return combineLatest(observables).pipe(debounceTime(0, asapScheduler), map(function (breakpointStates) {\n        /** @type {?} */\n        var response = {\n          matches: false,\n          breakpoints: {}\n        };\n        breakpointStates.forEach(function (state) {\n          response.matches = response.matches || state.matches;\n          response.breakpoints[state.query] = state.matches;\n        });\n        return response;\n      }));\n    }\n    /**\n     * Registers a specific query to be listened for.\n     * @private\n     * @param {?} query\n     * @return {?}\n     */\n\n  }, {\n    key: \"_registerQuery\",\n    value: function _registerQuery(query) {\n      var _this3 = this;\n\n      // Only set up a new MediaQueryList if it is not already being listened for.\n      if (this._queries.has(query)) {\n        return (\n          /** @type {?} */\n          this._queries.get(query)\n        );\n      }\n      /** @type {?} */\n\n\n      var mql = this.mediaMatcher.matchMedia(query); // TODO(jelbourn): change this `any` to `MediaQueryListEvent` once Google has upgraded to\n      // TypeScript 3.1 (the type is unavailable before then).\n\n      /** @type {?} */\n\n      var queryListener; // Create callback for match changes and add it is as a listener.\n\n      /** @type {?} */\n\n      var queryObservable = fromEventPattern( // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\n      // back into the zone because matchMedia is only included in Zone.js by loading the\n      // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\n      // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\n      // patches it.\n      function (listener) {\n        queryListener = function queryListener(e) {\n          return _this3.zone.run(function () {\n            return listener(e);\n          });\n        };\n\n        mql.addListener(queryListener);\n      }, function () {\n        return mql.removeListener(queryListener);\n      }).pipe(startWith(mql), map(function (nextMql) {\n        return {\n          query: query,\n          matches: nextMql.matches\n        };\n      }), takeUntil(this._destroySubject)); // Add the MediaQueryList to the set of queries.\n\n      /** @type {?} */\n\n      var output = {\n        observable: queryObservable,\n        mql: mql\n      };\n\n      this._queries.set(query, output);\n\n      return output;\n    }\n  }]);\n\n  return BreakpointObserver;\n}();\n\nBreakpointObserver.ɵfac = function BreakpointObserver_Factory(t) {\n  return new (t || BreakpointObserver)(ɵngcc0.ɵɵinject(MediaMatcher), ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n};\n\nBreakpointObserver.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: BreakpointObserver,\n  factory: BreakpointObserver.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nBreakpointObserver.ctorParameters = function () {\n  return [{\n    type: MediaMatcher\n  }, {\n    type: NgZone\n  }];\n};\n/** @nocollapse */\n\n\nBreakpointObserver.ngInjectableDef = defineInjectable({\n  factory: function BreakpointObserver_Factory() {\n    return new BreakpointObserver(inject(MediaMatcher), inject(NgZone));\n  },\n  token: BreakpointObserver,\n  providedIn: \"root\"\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(BreakpointObserver, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: MediaMatcher\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, null);\n})();\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n * @param {?} queries\n * @return {?}\n */\n\n\nfunction splitQueries(queries) {\n  return queries.map(function (query) {\n    return query.split(',');\n  }).reduce(function (a1, a2) {\n    return a1.concat(a2);\n  }).map(function (query) {\n    return query.trim();\n  });\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// PascalCase is being used as Breakpoints is used like an enum.\n// tslint:disable-next-line:variable-name\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n * @type {?}\n */\n\n\nvar Breakpoints = {\n  XSmall: '(max-width: 599.99px)',\n  Small: '(min-width: 600px) and (max-width: 959.99px)',\n  Medium: '(min-width: 960px) and (max-width: 1279.99px)',\n  Large: '(min-width: 1280px) and (max-width: 1919.99px)',\n  XLarge: '(min-width: 1920px)',\n  Handset: '(max-width: 599.99px) and (orientation: portrait), ' + '(max-width: 959.99px) and (orientation: landscape)',\n  Tablet: '(min-width: 600px) and (max-width: 839.99px) and (orientation: portrait), ' + '(min-width: 960px) and (max-width: 1279.99px) and (orientation: landscape)',\n  Web: '(min-width: 840px) and (orientation: portrait), ' + '(min-width: 1280px) and (orientation: landscape)',\n  HandsetPortrait: '(max-width: 599.99px) and (orientation: portrait)',\n  TabletPortrait: '(min-width: 600px) and (max-width: 839.99px) and (orientation: portrait)',\n  WebPortrait: '(min-width: 840px) and (orientation: portrait)',\n  HandsetLandscape: '(max-width: 959.99px) and (orientation: landscape)',\n  TabletLandscape: '(min-width: 960px) and (max-width: 1279.99px) and (orientation: landscape)',\n  WebLandscape: '(min-width: 1280px) and (orientation: landscape)'\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { LayoutModule, BreakpointObserver, Breakpoints, MediaMatcher };","map":{"version":3,"sources":["../../../src/cdk/layout/layout-module.ts","../../../src/cdk/layout/media-matcher.ts","../../../src/cdk/layout/breakpoints-observer.ts","../../../src/cdk/layout/breakpoints.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\n\n\n@NgModule({})\nexport class LayoutModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Injectable} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\n\n/** Global registry for all dynamically-created, injected media queries. */\nconst mediaQueriesForWebkitCompatibility: Set<string> = new Set<string>();\n\n/** Style tag that holds all of the dynamically-created media queries. */\nlet mediaQueryStyleNode: HTMLStyleElement | undefined;\n\n/** A utility for calling matchMedia queries. */\n@Injectable({providedIn: 'root'})\nexport class MediaMatcher {\n  /** The internal matchMedia method to return back a MediaQueryList like object. */\n  private _matchMedia: (query: string) => MediaQueryList;\n\n  constructor(private platform: Platform) {\n    this._matchMedia = this.platform.isBrowser && window.matchMedia ?\n      // matchMedia is bound to the window scope intentionally as it is an illegal invocation to\n      // call it from a different scope.\n      window.matchMedia.bind(window) :\n      noopMatchMedia;\n  }\n\n  /**\n   * Evaluates the given media query and returns the native MediaQueryList from which results\n   * can be retrieved.\n   * Confirms the layout engine will trigger for the selector query provided and returns the\n   * MediaQueryList for the query provided.\n   */\n  matchMedia(query: string): MediaQueryList {\n    if (this.platform.WEBKIT) {\n      createEmptyStyleRule(query);\n    }\n    return this._matchMedia(query);\n  }\n}\n\n/**\n * For Webkit engines that only trigger the MediaQueryListListener when\n * there is at least one CSS selector for the respective media query.\n */\nfunction createEmptyStyleRule(query: string) {\n  if (mediaQueriesForWebkitCompatibility.has(query)) {\n    return;\n  }\n\n  try {\n    if (!mediaQueryStyleNode) {\n      mediaQueryStyleNode = document.createElement('style');\n      mediaQueryStyleNode.setAttribute('type', 'text/css');\n      document.head!.appendChild(mediaQueryStyleNode);\n    }\n\n    if (mediaQueryStyleNode.sheet) {\n      (mediaQueryStyleNode.sheet as CSSStyleSheet)\n          .insertRule(`@media ${query} {.fx-query-test{ }}`, 0);\n      mediaQueriesForWebkitCompatibility.add(query);\n    }\n  } catch (e) {\n    console.error(e);\n  }\n}\n\n/** No-op matchMedia replacement for non-browser platforms. */\nfunction noopMatchMedia(query: string): MediaQueryList {\n  // Use `as any` here to avoid adding additional necessary properties for\n  // the noop matcher.\n  return {\n    matches: query === 'all' || query === '',\n    media: query,\n    addListener: () => {},\n    removeListener: () => {}\n  } as any;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, NgZone, OnDestroy} from '@angular/core';\nimport {MediaMatcher} from './media-matcher';\nimport {asapScheduler, combineLatest, fromEventPattern, Observable, Subject} from 'rxjs';\nimport {debounceTime, map, startWith, takeUntil} from 'rxjs/operators';\nimport {coerceArray} from '@angular/cdk/coercion';\n\n\n/** The current state of a layout breakpoint. */\nexport interface BreakpointState {\n  /** Whether the breakpoint is currently matching. */\n  matches: boolean;\n  /**\n   * A key boolean pair for each query provided to the observe method,\n   * with its current matched state.\n   */\n  breakpoints: {\n    [key: string]: boolean;\n  };\n}\n\n/** The current state of a layout breakpoint. */\ninterface InternalBreakpointState {\n  /** Whether the breakpoint is currently matching. */\n  matches: boolean;\n  /** The media query being to be matched */\n  query: string;\n}\n\ninterface Query {\n  observable: Observable<InternalBreakpointState>;\n  mql: MediaQueryList;\n}\n\n/** Utility for checking the matching state of @media queries. */\n@Injectable({providedIn: 'root'})\nexport class BreakpointObserver implements OnDestroy {\n  /**  A map of all media queries currently being listened for. */\n  private _queries = new Map<string, Query>();\n  /** A subject for all other observables to takeUntil based on. */\n  private _destroySubject = new Subject<void>();\n\n  constructor(private mediaMatcher: MediaMatcher, private zone: NgZone) {}\n\n  /** Completes the active subject, signalling to all other observables to complete. */\n  ngOnDestroy() {\n    this._destroySubject.next();\n    this._destroySubject.complete();\n  }\n\n  /**\n   * Whether one or more media queries match the current viewport size.\n   * @param value One or more media queries to check.\n   * @returns Whether any of the media queries match.\n   */\n  isMatched(value: string | string[]): boolean {\n    const queries = splitQueries(coerceArray(value));\n    return queries.some(mediaQuery => this._registerQuery(mediaQuery).mql.matches);\n  }\n\n  /**\n   * Gets an observable of results for the given queries that will emit new results for any changes\n   * in matching of the given queries.\n   * @param value One or more media queries to check.\n   * @returns A stream of matches for the given queries.\n   */\n  observe(value: string | string[]): Observable<BreakpointState> {\n    const queries = splitQueries(coerceArray(value));\n    const observables = queries.map(query => this._registerQuery(query).observable);\n\n    return combineLatest(observables).pipe(\n      debounceTime(0, asapScheduler),\n      map((breakpointStates: InternalBreakpointState[]) => {\n        const response: BreakpointState = {\n          matches: false,\n          breakpoints: {},\n        };\n        breakpointStates.forEach((state: InternalBreakpointState) => {\n          response.matches = response.matches || state.matches;\n          response.breakpoints[state.query] = state.matches;\n        });\n        return response;\n      }));\n  }\n\n  /** Registers a specific query to be listened for. */\n  private _registerQuery(query: string): Query {\n    // Only set up a new MediaQueryList if it is not already being listened for.\n    if (this._queries.has(query)) {\n      return this._queries.get(query)!;\n    }\n\n    const mql: MediaQueryList = this.mediaMatcher.matchMedia(query);\n\n    // TODO(jelbourn): change this `any` to `MediaQueryListEvent` once Google has upgraded to\n    // TypeScript 3.1 (the type is unavailable before then).\n    let queryListener: any;\n\n    // Create callback for match changes and add it is as a listener.\n    const queryObservable = fromEventPattern<MediaQueryList>(\n      // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\n      // back into the zone because matchMedia is only included in Zone.js by loading the\n      // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\n      // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\n      // patches it.\n      (listener: Function) => {\n        queryListener = (e: any) => this.zone.run(() => listener(e));\n        mql.addListener(queryListener);\n      },\n      () => mql.removeListener(queryListener))\n      .pipe(\n        startWith(mql),\n        map((nextMql: MediaQueryList) => ({query, matches: nextMql.matches})),\n        takeUntil(this._destroySubject)\n      );\n\n    // Add the MediaQueryList to the set of queries.\n    const output = {observable: queryObservable, mql};\n    this._queries.set(query, output);\n    return output;\n  }\n}\n\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n */\nfunction splitQueries(queries: string[]): string[] {\n  return queries.map((query: string) => query.split(','))\n                .reduce((a1: string[], a2: string[]) => a1.concat(a2))\n                .map(query => query.trim());\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// PascalCase is being used as Breakpoints is used like an enum.\n// tslint:disable-next-line:variable-name\nexport const Breakpoints = {\n  XSmall: '(max-width: 599.99px)',\n  Small: '(min-width: 600px) and (max-width: 959.99px)',\n  Medium: '(min-width: 960px) and (max-width: 1279.99px)',\n  Large: '(min-width: 1280px) and (max-width: 1919.99px)',\n  XLarge: '(min-width: 1920px)',\n\n  Handset: '(max-width: 599.99px) and (orientation: portrait), ' +\n           '(max-width: 959.99px) and (orientation: landscape)',\n  Tablet: '(min-width: 600px) and (max-width: 839.99px) and (orientation: portrait), ' +\n          '(min-width: 960px) and (max-width: 1279.99px) and (orientation: landscape)',\n  Web: '(min-width: 840px) and (orientation: portrait), ' +\n       '(min-width: 1280px) and (orientation: landscape)',\n\n  HandsetPortrait: '(max-width: 599.99px) and (orientation: portrait)',\n  TabletPortrait: '(min-width: 600px) and (max-width: 839.99px) and (orientation: portrait)',\n  WebPortrait: '(min-width: 840px) and (orientation: portrait)',\n\n  HandsetLandscape: '(max-width: 959.99px) and (orientation: landscape)',\n  TabletLandscape: '(min-width: 960px) and (max-width: 1279.99px) and (orientation: landscape)',\n  WebLandscape: '(min-width: 1280px) and (orientation: landscape)',\n};\n"]},"metadata":{},"sourceType":"module"}